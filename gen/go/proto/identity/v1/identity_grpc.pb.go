// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/identity/v1/identity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentityService_GetOrCreateUser_FullMethodName                 = "/identity.v1.IdentityService/GetOrCreateUser"
	IdentityService_GetUser_FullMethodName                         = "/identity.v1.IdentityService/GetUser"
	IdentityService_UpdateUser_FullMethodName                      = "/identity.v1.IdentityService/UpdateUser"
	IdentityService_CheckPermission_FullMethodName                 = "/identity.v1.IdentityService/CheckPermission"
	IdentityService_CheckOrganizationPermission_FullMethodName     = "/identity.v1.IdentityService/CheckOrganizationPermission"
	IdentityService_GetUserPermissions_FullMethodName              = "/identity.v1.IdentityService/GetUserPermissions"
	IdentityService_CreateOrganization_FullMethodName              = "/identity.v1.IdentityService/CreateOrganization"
	IdentityService_GetOrganization_FullMethodName                 = "/identity.v1.IdentityService/GetOrganization"
	IdentityService_UpdateOrganization_FullMethodName              = "/identity.v1.IdentityService/UpdateOrganization"
	IdentityService_DeleteOrganization_FullMethodName              = "/identity.v1.IdentityService/DeleteOrganization"
	IdentityService_ListUserOrganizations_FullMethodName           = "/identity.v1.IdentityService/ListUserOrganizations"
	IdentityService_GetOrganizationMembers_FullMethodName          = "/identity.v1.IdentityService/GetOrganizationMembers"
	IdentityService_GetTeamMembers_FullMethodName                  = "/identity.v1.IdentityService/GetTeamMembers"
	IdentityService_CreateTeam_FullMethodName                      = "/identity.v1.IdentityService/CreateTeam"
	IdentityService_GetTeam_FullMethodName                         = "/identity.v1.IdentityService/GetTeam"
	IdentityService_UpdateTeam_FullMethodName                      = "/identity.v1.IdentityService/UpdateTeam"
	IdentityService_DeleteTeam_FullMethodName                      = "/identity.v1.IdentityService/DeleteTeam"
	IdentityService_ListOrganizationTeams_FullMethodName           = "/identity.v1.IdentityService/ListOrganizationTeams"
	IdentityService_GetTeamHierarchy_FullMethodName                = "/identity.v1.IdentityService/GetTeamHierarchy"
	IdentityService_CreateOrganizationRole_FullMethodName          = "/identity.v1.IdentityService/CreateOrganizationRole"
	IdentityService_ListOrganizationRoles_FullMethodName           = "/identity.v1.IdentityService/ListOrganizationRoles"
	IdentityService_UpdateOrganizationRole_FullMethodName          = "/identity.v1.IdentityService/UpdateOrganizationRole"
	IdentityService_DeleteOrganizationRole_FullMethodName          = "/identity.v1.IdentityService/DeleteOrganizationRole"
	IdentityService_AddOrganizationMember_FullMethodName           = "/identity.v1.IdentityService/AddOrganizationMember"
	IdentityService_RemoveOrganizationMember_FullMethodName        = "/identity.v1.IdentityService/RemoveOrganizationMember"
	IdentityService_UpdateOrganizationMemberRole_FullMethodName    = "/identity.v1.IdentityService/UpdateOrganizationMemberRole"
	IdentityService_AddTeamMember_FullMethodName                   = "/identity.v1.IdentityService/AddTeamMember"
	IdentityService_RemoveTeamMember_FullMethodName                = "/identity.v1.IdentityService/RemoveTeamMember"
	IdentityService_UpdateTeamMemberRole_FullMethodName            = "/identity.v1.IdentityService/UpdateTeamMemberRole"
	IdentityService_CreateOrganizationConnection_FullMethodName    = "/identity.v1.IdentityService/CreateOrganizationConnection"
	IdentityService_ListConnectedOrganizations_FullMethodName      = "/identity.v1.IdentityService/ListConnectedOrganizations"
	IdentityService_UpdateOrganizationConnection_FullMethodName    = "/identity.v1.IdentityService/UpdateOrganizationConnection"
	IdentityService_DeleteOrganizationConnection_FullMethodName    = "/identity.v1.IdentityService/DeleteOrganizationConnection"
	IdentityService_GrantCrossOrganizationAccess_FullMethodName    = "/identity.v1.IdentityService/GrantCrossOrganizationAccess"
	IdentityService_RevokeCrossOrganizationAccess_FullMethodName   = "/identity.v1.IdentityService/RevokeCrossOrganizationAccess"
	IdentityService_ListUserCrossOrganizationAccess_FullMethodName = "/identity.v1.IdentityService/ListUserCrossOrganizationAccess"
	IdentityService_CreateInvitation_FullMethodName                = "/identity.v1.IdentityService/CreateInvitation"
	IdentityService_AcceptInvitation_FullMethodName                = "/identity.v1.IdentityService/AcceptInvitation"
	IdentityService_ListInvitations_FullMethodName                 = "/identity.v1.IdentityService/ListInvitations"
	IdentityService_CancelInvitation_FullMethodName                = "/identity.v1.IdentityService/CancelInvitation"
	IdentityService_BindUserToOrganization_FullMethodName          = "/identity.v1.IdentityService/BindUserToOrganization"
	IdentityService_GetUserAccessContext_FullMethodName            = "/identity.v1.IdentityService/GetUserAccessContext"
	IdentityService_CanUserJoinOrganization_FullMethodName         = "/identity.v1.IdentityService/CanUserJoinOrganization"
	IdentityService_ValidateOrganizationAccess_FullMethodName      = "/identity.v1.IdentityService/ValidateOrganizationAccess"
	IdentityService_ValidateTeamAccess_FullMethodName              = "/identity.v1.IdentityService/ValidateTeamAccess"
	IdentityService_GetOrganizationByTeam_FullMethodName           = "/identity.v1.IdentityService/GetOrganizationByTeam"
	IdentityService_CleanupExpiredData_FullMethodName              = "/identity.v1.IdentityService/CleanupExpiredData"
)

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IdentityService provides internal methods for managing users, teams,
// organizations, and permissions.
type IdentityServiceClient interface {
	// === User Management ===
	// Retrieves a user's profile, creates them if they don't exist.
	// Called by auth-service during registration or JIT provisioning.
	GetOrCreateUser(ctx context.Context, in *GetOrCreateUserRequest, opts ...grpc.CallOption) (*GetOrCreateUserResponse, error)
	// Get user profile with organization context
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Update user profile
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// === Permission Management ===
	// Checks if a user has a specific permission within a team.
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	// Checks if a user has a specific permission within an organization.
	CheckOrganizationPermission(ctx context.Context, in *CheckOrganizationPermissionRequest, opts ...grpc.CallOption) (*CheckOrganizationPermissionResponse, error)
	// Get user's effective permissions in context
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	// === Organization Management ===
	// Create a new organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// Get organization details
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// Update organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Delete organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// List organizations user has access to
	ListUserOrganizations(ctx context.Context, in *ListUserOrganizationsRequest, opts ...grpc.CallOption) (*ListUserOrganizationsResponse, error)
	// Get organization members
	GetOrganizationMembers(ctx context.Context, in *GetOrganizationMembersRequest, opts ...grpc.CallOption) (*GetOrganizationMembersResponse, error)
	// === Team Management ===
	// Gets a list of team members and their roles from this service's database.
	GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error)
	// Create team within organization
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	// Get team details with hierarchy
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	// Update team
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error)
	// Delete team
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	// List teams in organization
	ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error)
	// Get team hierarchy
	GetTeamHierarchy(ctx context.Context, in *GetTeamHierarchyRequest, opts ...grpc.CallOption) (*GetTeamHierarchyResponse, error)
	// === Role Management ===
	// Create organization role
	CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error)
	// Get organization roles
	ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error)
	// Update organization role
	UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error)
	// Delete organization role
	DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error)
	// === Membership Management ===
	// Add user to organization
	AddOrganizationMember(ctx context.Context, in *AddOrganizationMemberRequest, opts ...grpc.CallOption) (*AddOrganizationMemberResponse, error)
	// Remove user from organization
	RemoveOrganizationMember(ctx context.Context, in *RemoveOrganizationMemberRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberResponse, error)
	// Update user's organization role
	UpdateOrganizationMemberRole(ctx context.Context, in *UpdateOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationMemberRoleResponse, error)
	// Add user to team
	AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberResponse, error)
	// Remove user from team
	RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error)
	// Update user's team role
	UpdateTeamMemberRole(ctx context.Context, in *UpdateTeamMemberRoleRequest, opts ...grpc.CallOption) (*UpdateTeamMemberRoleResponse, error)
	// === Organization Connections ===
	// Create connection between organizations
	CreateOrganizationConnection(ctx context.Context, in *CreateOrganizationConnectionRequest, opts ...grpc.CallOption) (*CreateOrganizationConnectionResponse, error)
	// List connected organizations
	ListConnectedOrganizations(ctx context.Context, in *ListConnectedOrganizationsRequest, opts ...grpc.CallOption) (*ListConnectedOrganizationsResponse, error)
	// Update organization connection
	UpdateOrganizationConnection(ctx context.Context, in *UpdateOrganizationConnectionRequest, opts ...grpc.CallOption) (*UpdateOrganizationConnectionResponse, error)
	// Delete organization connection
	DeleteOrganizationConnection(ctx context.Context, in *DeleteOrganizationConnectionRequest, opts ...grpc.CallOption) (*DeleteOrganizationConnectionResponse, error)
	// === Cross-Organization Access ===
	// Grant cross-organization access
	GrantCrossOrganizationAccess(ctx context.Context, in *GrantCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*GrantCrossOrganizationAccessResponse, error)
	// Revoke cross-organization access
	RevokeCrossOrganizationAccess(ctx context.Context, in *RevokeCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*RevokeCrossOrganizationAccessResponse, error)
	// List user's cross-organization access
	ListUserCrossOrganizationAccess(ctx context.Context, in *ListUserCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*ListUserCrossOrganizationAccessResponse, error)
	// === Invitation Management ===
	// Create invitation (team, organization, or cross-organization)
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	// Accept invitation with optional account creation
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	// List invitations
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	// Cancel invitation
	CancelInvitation(ctx context.Context, in *CancelInvitationRequest, opts ...grpc.CallOption) (*CancelInvitationResponse, error)
	// === Enterprise User Management ===
	// Bind user to organization (enterprise users)
	BindUserToOrganization(ctx context.Context, in *BindUserToOrganizationRequest, opts ...grpc.CallOption) (*BindUserToOrganizationResponse, error)
	// Get user's access context
	GetUserAccessContext(ctx context.Context, in *GetUserAccessContextRequest, opts ...grpc.CallOption) (*GetUserAccessContextResponse, error)
	// Check if user can join organization
	CanUserJoinOrganization(ctx context.Context, in *CanUserJoinOrganizationRequest, opts ...grpc.CallOption) (*CanUserJoinOrganizationResponse, error)
	// === Utility Methods ===
	// Validate organization exists and user has access
	ValidateOrganizationAccess(ctx context.Context, in *ValidateOrganizationAccessRequest, opts ...grpc.CallOption) (*ValidateOrganizationAccessResponse, error)
	// Validate team exists and user has access
	ValidateTeamAccess(ctx context.Context, in *ValidateTeamAccessRequest, opts ...grpc.CallOption) (*ValidateTeamAccessResponse, error)
	// Get organization by team ID
	GetOrganizationByTeam(ctx context.Context, in *GetOrganizationByTeamRequest, opts ...grpc.CallOption) (*GetOrganizationByTeamResponse, error)
	// Cleanup expired invitations and access
	CleanupExpiredData(ctx context.Context, in *CleanupExpiredDataRequest, opts ...grpc.CallOption) (*CleanupExpiredDataResponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) GetOrCreateUser(ctx context.Context, in *GetOrCreateUserRequest, opts ...grpc.CallOption) (*GetOrCreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrCreateUserResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrCreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, IdentityService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckOrganizationPermission(ctx context.Context, in *CheckOrganizationPermissionRequest, opts ...grpc.CallOption) (*CheckOrganizationPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOrganizationPermissionResponse)
	err := c.cc.Invoke(ctx, IdentityService_CheckOrganizationPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUserOrganizations(ctx context.Context, in *ListUserOrganizationsRequest, opts ...grpc.CallOption) (*ListUserOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserOrganizationsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListUserOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetOrganizationMembers(ctx context.Context, in *GetOrganizationMembersRequest, opts ...grpc.CallOption) (*GetOrganizationMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamMembersResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationTeamsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListOrganizationTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetTeamHierarchy(ctx context.Context, in *GetTeamHierarchyRequest, opts ...grpc.CallOption) (*GetTeamHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamHierarchyResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetTeamHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationRolesResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListOrganizationRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddOrganizationMember(ctx context.Context, in *AddOrganizationMemberRequest, opts ...grpc.CallOption) (*AddOrganizationMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_AddOrganizationMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveOrganizationMember(ctx context.Context, in *RemoveOrganizationMemberRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_RemoveOrganizationMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganizationMemberRole(ctx context.Context, in *UpdateOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationMemberRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationMemberRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganizationMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTeamMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_AddTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTeamMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_RemoveTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateTeamMemberRole(ctx context.Context, in *UpdateTeamMemberRoleRequest, opts ...grpc.CallOption) (*UpdateTeamMemberRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTeamMemberRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateTeamMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateOrganizationConnection(ctx context.Context, in *CreateOrganizationConnectionRequest, opts ...grpc.CallOption) (*CreateOrganizationConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateOrganizationConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListConnectedOrganizations(ctx context.Context, in *ListConnectedOrganizationsRequest, opts ...grpc.CallOption) (*ListConnectedOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectedOrganizationsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListConnectedOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganizationConnection(ctx context.Context, in *UpdateOrganizationConnectionRequest, opts ...grpc.CallOption) (*UpdateOrganizationConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganizationConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteOrganizationConnection(ctx context.Context, in *DeleteOrganizationConnectionRequest, opts ...grpc.CallOption) (*DeleteOrganizationConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteOrganizationConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GrantCrossOrganizationAccess(ctx context.Context, in *GrantCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*GrantCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_GrantCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RevokeCrossOrganizationAccess(ctx context.Context, in *RevokeCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*RevokeCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_RevokeCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUserCrossOrganizationAccess(ctx context.Context, in *ListUserCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*ListUserCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListUserCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, IdentityService_AcceptInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CancelInvitation(ctx context.Context, in *CancelInvitationRequest, opts ...grpc.CallOption) (*CancelInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelInvitationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CancelInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) BindUserToOrganization(ctx context.Context, in *BindUserToOrganizationRequest, opts ...grpc.CallOption) (*BindUserToOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindUserToOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_BindUserToOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUserAccessContext(ctx context.Context, in *GetUserAccessContextRequest, opts ...grpc.CallOption) (*GetUserAccessContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAccessContextResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUserAccessContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CanUserJoinOrganization(ctx context.Context, in *CanUserJoinOrganizationRequest, opts ...grpc.CallOption) (*CanUserJoinOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanUserJoinOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CanUserJoinOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ValidateOrganizationAccess(ctx context.Context, in *ValidateOrganizationAccessRequest, opts ...grpc.CallOption) (*ValidateOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_ValidateOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ValidateTeamAccess(ctx context.Context, in *ValidateTeamAccessRequest, opts ...grpc.CallOption) (*ValidateTeamAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTeamAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_ValidateTeamAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetOrganizationByTeam(ctx context.Context, in *GetOrganizationByTeamRequest, opts ...grpc.CallOption) (*GetOrganizationByTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationByTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrganizationByTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CleanupExpiredData(ctx context.Context, in *CleanupExpiredDataRequest, opts ...grpc.CallOption) (*CleanupExpiredDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupExpiredDataResponse)
	err := c.cc.Invoke(ctx, IdentityService_CleanupExpiredData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility.
//
// IdentityService provides internal methods for managing users, teams,
// organizations, and permissions.
type IdentityServiceServer interface {
	// === User Management ===
	// Retrieves a user's profile, creates them if they don't exist.
	// Called by auth-service during registration or JIT provisioning.
	GetOrCreateUser(context.Context, *GetOrCreateUserRequest) (*GetOrCreateUserResponse, error)
	// Get user profile with organization context
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Update user profile
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// === Permission Management ===
	// Checks if a user has a specific permission within a team.
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	// Checks if a user has a specific permission within an organization.
	CheckOrganizationPermission(context.Context, *CheckOrganizationPermissionRequest) (*CheckOrganizationPermissionResponse, error)
	// Get user's effective permissions in context
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	// === Organization Management ===
	// Create a new organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// Get organization details
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// Update organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Delete organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// List organizations user has access to
	ListUserOrganizations(context.Context, *ListUserOrganizationsRequest) (*ListUserOrganizationsResponse, error)
	// Get organization members
	GetOrganizationMembers(context.Context, *GetOrganizationMembersRequest) (*GetOrganizationMembersResponse, error)
	// === Team Management ===
	// Gets a list of team members and their roles from this service's database.
	GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error)
	// Create team within organization
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	// Get team details with hierarchy
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	// Update team
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error)
	// Delete team
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	// List teams in organization
	ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error)
	// Get team hierarchy
	GetTeamHierarchy(context.Context, *GetTeamHierarchyRequest) (*GetTeamHierarchyResponse, error)
	// === Role Management ===
	// Create organization role
	CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error)
	// Get organization roles
	ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error)
	// Update organization role
	UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error)
	// Delete organization role
	DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error)
	// === Membership Management ===
	// Add user to organization
	AddOrganizationMember(context.Context, *AddOrganizationMemberRequest) (*AddOrganizationMemberResponse, error)
	// Remove user from organization
	RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error)
	// Update user's organization role
	UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error)
	// Add user to team
	AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error)
	// Remove user from team
	RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error)
	// Update user's team role
	UpdateTeamMemberRole(context.Context, *UpdateTeamMemberRoleRequest) (*UpdateTeamMemberRoleResponse, error)
	// === Organization Connections ===
	// Create connection between organizations
	CreateOrganizationConnection(context.Context, *CreateOrganizationConnectionRequest) (*CreateOrganizationConnectionResponse, error)
	// List connected organizations
	ListConnectedOrganizations(context.Context, *ListConnectedOrganizationsRequest) (*ListConnectedOrganizationsResponse, error)
	// Update organization connection
	UpdateOrganizationConnection(context.Context, *UpdateOrganizationConnectionRequest) (*UpdateOrganizationConnectionResponse, error)
	// Delete organization connection
	DeleteOrganizationConnection(context.Context, *DeleteOrganizationConnectionRequest) (*DeleteOrganizationConnectionResponse, error)
	// === Cross-Organization Access ===
	// Grant cross-organization access
	GrantCrossOrganizationAccess(context.Context, *GrantCrossOrganizationAccessRequest) (*GrantCrossOrganizationAccessResponse, error)
	// Revoke cross-organization access
	RevokeCrossOrganizationAccess(context.Context, *RevokeCrossOrganizationAccessRequest) (*RevokeCrossOrganizationAccessResponse, error)
	// List user's cross-organization access
	ListUserCrossOrganizationAccess(context.Context, *ListUserCrossOrganizationAccessRequest) (*ListUserCrossOrganizationAccessResponse, error)
	// === Invitation Management ===
	// Create invitation (team, organization, or cross-organization)
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	// Accept invitation with optional account creation
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	// List invitations
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	// Cancel invitation
	CancelInvitation(context.Context, *CancelInvitationRequest) (*CancelInvitationResponse, error)
	// === Enterprise User Management ===
	// Bind user to organization (enterprise users)
	BindUserToOrganization(context.Context, *BindUserToOrganizationRequest) (*BindUserToOrganizationResponse, error)
	// Get user's access context
	GetUserAccessContext(context.Context, *GetUserAccessContextRequest) (*GetUserAccessContextResponse, error)
	// Check if user can join organization
	CanUserJoinOrganization(context.Context, *CanUserJoinOrganizationRequest) (*CanUserJoinOrganizationResponse, error)
	// === Utility Methods ===
	// Validate organization exists and user has access
	ValidateOrganizationAccess(context.Context, *ValidateOrganizationAccessRequest) (*ValidateOrganizationAccessResponse, error)
	// Validate team exists and user has access
	ValidateTeamAccess(context.Context, *ValidateTeamAccessRequest) (*ValidateTeamAccessResponse, error)
	// Get organization by team ID
	GetOrganizationByTeam(context.Context, *GetOrganizationByTeamRequest) (*GetOrganizationByTeamResponse, error)
	// Cleanup expired invitations and access
	CleanupExpiredData(context.Context, *CleanupExpiredDataRequest) (*CleanupExpiredDataResponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityServiceServer struct{}

func (UnimplementedIdentityServiceServer) GetOrCreateUser(context.Context, *GetOrCreateUserRequest) (*GetOrCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateUser not implemented")
}
func (UnimplementedIdentityServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedIdentityServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedIdentityServiceServer) CheckOrganizationPermission(context.Context, *CheckOrganizationPermissionRequest) (*CheckOrganizationPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrganizationPermission not implemented")
}
func (UnimplementedIdentityServiceServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedIdentityServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) ListUserOrganizations(context.Context, *ListUserOrganizationsRequest) (*ListUserOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOrganizations not implemented")
}
func (UnimplementedIdentityServiceServer) GetOrganizationMembers(context.Context, *GetOrganizationMembersRequest) (*GetOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembers not implemented")
}
func (UnimplementedIdentityServiceServer) GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembers not implemented")
}
func (UnimplementedIdentityServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedIdentityServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedIdentityServiceServer) ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationTeams not implemented")
}
func (UnimplementedIdentityServiceServer) GetTeamHierarchy(context.Context, *GetTeamHierarchyRequest) (*GetTeamHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamHierarchy not implemented")
}
func (UnimplementedIdentityServiceServer) CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationRole not implemented")
}
func (UnimplementedIdentityServiceServer) ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationRoles not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationRole not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationRole not implemented")
}
func (UnimplementedIdentityServiceServer) AddOrganizationMember(context.Context, *AddOrganizationMemberRequest) (*AddOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationMember not implemented")
}
func (UnimplementedIdentityServiceServer) RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationMember not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMemberRole not implemented")
}
func (UnimplementedIdentityServiceServer) AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMember not implemented")
}
func (UnimplementedIdentityServiceServer) RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMember not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateTeamMemberRole(context.Context, *UpdateTeamMemberRoleRequest) (*UpdateTeamMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamMemberRole not implemented")
}
func (UnimplementedIdentityServiceServer) CreateOrganizationConnection(context.Context, *CreateOrganizationConnectionRequest) (*CreateOrganizationConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationConnection not implemented")
}
func (UnimplementedIdentityServiceServer) ListConnectedOrganizations(context.Context, *ListConnectedOrganizationsRequest) (*ListConnectedOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedOrganizations not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganizationConnection(context.Context, *UpdateOrganizationConnectionRequest) (*UpdateOrganizationConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationConnection not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteOrganizationConnection(context.Context, *DeleteOrganizationConnectionRequest) (*DeleteOrganizationConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationConnection not implemented")
}
func (UnimplementedIdentityServiceServer) GrantCrossOrganizationAccess(context.Context, *GrantCrossOrganizationAccessRequest) (*GrantCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantCrossOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) RevokeCrossOrganizationAccess(context.Context, *RevokeCrossOrganizationAccessRequest) (*RevokeCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCrossOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) ListUserCrossOrganizationAccess(context.Context, *ListUserCrossOrganizationAccessRequest) (*ListUserCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCrossOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedIdentityServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedIdentityServiceServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedIdentityServiceServer) CancelInvitation(context.Context, *CancelInvitationRequest) (*CancelInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvitation not implemented")
}
func (UnimplementedIdentityServiceServer) BindUserToOrganization(context.Context, *BindUserToOrganizationRequest) (*BindUserToOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserToOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) GetUserAccessContext(context.Context, *GetUserAccessContextRequest) (*GetUserAccessContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccessContext not implemented")
}
func (UnimplementedIdentityServiceServer) CanUserJoinOrganization(context.Context, *CanUserJoinOrganizationRequest) (*CanUserJoinOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUserJoinOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) ValidateOrganizationAccess(context.Context, *ValidateOrganizationAccessRequest) (*ValidateOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) ValidateTeamAccess(context.Context, *ValidateTeamAccessRequest) (*ValidateTeamAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTeamAccess not implemented")
}
func (UnimplementedIdentityServiceServer) GetOrganizationByTeam(context.Context, *GetOrganizationByTeamRequest) (*GetOrganizationByTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationByTeam not implemented")
}
func (UnimplementedIdentityServiceServer) CleanupExpiredData(context.Context, *CleanupExpiredDataRequest) (*CleanupExpiredDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupExpiredData not implemented")
}
func (UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}
func (UnimplementedIdentityServiceServer) testEmbeddedByValue()                         {}

// UnsafeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceServer will
// result in compilation errors.
type UnsafeIdentityServiceServer interface {
	mustEmbedUnimplementedIdentityServiceServer()
}

func RegisterIdentityServiceServer(s grpc.ServiceRegistrar, srv IdentityServiceServer) {
	// If the following call pancis, it indicates UnimplementedIdentityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentityService_ServiceDesc, srv)
}

func _IdentityService_GetOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrCreateUser(ctx, req.(*GetOrCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckOrganizationPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOrganizationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckOrganizationPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CheckOrganizationPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckOrganizationPermission(ctx, req.(*CheckOrganizationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUserOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUserOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListUserOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUserOrganizations(ctx, req.(*ListUserOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrganizationMembers(ctx, req.(*GetOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetTeamMembers(ctx, req.(*GetTeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListOrganizationTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListOrganizationTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListOrganizationTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListOrganizationTeams(ctx, req.(*ListOrganizationTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetTeamHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetTeamHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetTeamHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetTeamHierarchy(ctx, req.(*GetTeamHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateOrganizationRole(ctx, req.(*CreateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListOrganizationRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListOrganizationRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListOrganizationRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListOrganizationRoles(ctx, req.(*ListOrganizationRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganizationRole(ctx, req.(*UpdateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteOrganizationRole(ctx, req.(*DeleteOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_AddOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddOrganizationMember(ctx, req.(*AddOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RemoveOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveOrganizationMember(ctx, req.(*RemoveOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganizationMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganizationMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganizationMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganizationMemberRole(ctx, req.(*UpdateOrganizationMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_AddTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddTeamMember(ctx, req.(*AddTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RemoveTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveTeamMember(ctx, req.(*RemoveTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateTeamMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateTeamMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateTeamMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateTeamMemberRole(ctx, req.(*UpdateTeamMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateOrganizationConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateOrganizationConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateOrganizationConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateOrganizationConnection(ctx, req.(*CreateOrganizationConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListConnectedOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectedOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListConnectedOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListConnectedOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListConnectedOrganizations(ctx, req.(*ListConnectedOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganizationConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganizationConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganizationConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganizationConnection(ctx, req.(*UpdateOrganizationConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteOrganizationConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteOrganizationConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteOrganizationConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteOrganizationConnection(ctx, req.(*DeleteOrganizationConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GrantCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GrantCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GrantCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GrantCrossOrganizationAccess(ctx, req.(*GrantCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RevokeCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RevokeCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RevokeCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RevokeCrossOrganizationAccess(ctx, req.(*RevokeCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUserCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUserCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListUserCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUserCrossOrganizationAccess(ctx, req.(*ListUserCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CancelInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CancelInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CancelInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CancelInvitation(ctx, req.(*CancelInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_BindUserToOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserToOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).BindUserToOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_BindUserToOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).BindUserToOrganization(ctx, req.(*BindUserToOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUserAccessContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccessContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUserAccessContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUserAccessContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUserAccessContext(ctx, req.(*GetUserAccessContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CanUserJoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUserJoinOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CanUserJoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CanUserJoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CanUserJoinOrganization(ctx, req.(*CanUserJoinOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ValidateOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ValidateOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ValidateOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ValidateOrganizationAccess(ctx, req.(*ValidateOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ValidateTeamAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTeamAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ValidateTeamAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ValidateTeamAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ValidateTeamAccess(ctx, req.(*ValidateTeamAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetOrganizationByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationByTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrganizationByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrganizationByTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrganizationByTeam(ctx, req.(*GetOrganizationByTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CleanupExpiredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupExpiredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CleanupExpiredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CleanupExpiredData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CleanupExpiredData(ctx, req.(*CleanupExpiredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityService_ServiceDesc is the grpc.ServiceDesc for IdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.v1.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrCreateUser",
			Handler:    _IdentityService_GetOrCreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IdentityService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IdentityService_UpdateUser_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _IdentityService_CheckPermission_Handler,
		},
		{
			MethodName: "CheckOrganizationPermission",
			Handler:    _IdentityService_CheckOrganizationPermission_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _IdentityService_GetUserPermissions_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _IdentityService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _IdentityService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _IdentityService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _IdentityService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListUserOrganizations",
			Handler:    _IdentityService_ListUserOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationMembers",
			Handler:    _IdentityService_GetOrganizationMembers_Handler,
		},
		{
			MethodName: "GetTeamMembers",
			Handler:    _IdentityService_GetTeamMembers_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _IdentityService_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _IdentityService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _IdentityService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _IdentityService_DeleteTeam_Handler,
		},
		{
			MethodName: "ListOrganizationTeams",
			Handler:    _IdentityService_ListOrganizationTeams_Handler,
		},
		{
			MethodName: "GetTeamHierarchy",
			Handler:    _IdentityService_GetTeamHierarchy_Handler,
		},
		{
			MethodName: "CreateOrganizationRole",
			Handler:    _IdentityService_CreateOrganizationRole_Handler,
		},
		{
			MethodName: "ListOrganizationRoles",
			Handler:    _IdentityService_ListOrganizationRoles_Handler,
		},
		{
			MethodName: "UpdateOrganizationRole",
			Handler:    _IdentityService_UpdateOrganizationRole_Handler,
		},
		{
			MethodName: "DeleteOrganizationRole",
			Handler:    _IdentityService_DeleteOrganizationRole_Handler,
		},
		{
			MethodName: "AddOrganizationMember",
			Handler:    _IdentityService_AddOrganizationMember_Handler,
		},
		{
			MethodName: "RemoveOrganizationMember",
			Handler:    _IdentityService_RemoveOrganizationMember_Handler,
		},
		{
			MethodName: "UpdateOrganizationMemberRole",
			Handler:    _IdentityService_UpdateOrganizationMemberRole_Handler,
		},
		{
			MethodName: "AddTeamMember",
			Handler:    _IdentityService_AddTeamMember_Handler,
		},
		{
			MethodName: "RemoveTeamMember",
			Handler:    _IdentityService_RemoveTeamMember_Handler,
		},
		{
			MethodName: "UpdateTeamMemberRole",
			Handler:    _IdentityService_UpdateTeamMemberRole_Handler,
		},
		{
			MethodName: "CreateOrganizationConnection",
			Handler:    _IdentityService_CreateOrganizationConnection_Handler,
		},
		{
			MethodName: "ListConnectedOrganizations",
			Handler:    _IdentityService_ListConnectedOrganizations_Handler,
		},
		{
			MethodName: "UpdateOrganizationConnection",
			Handler:    _IdentityService_UpdateOrganizationConnection_Handler,
		},
		{
			MethodName: "DeleteOrganizationConnection",
			Handler:    _IdentityService_DeleteOrganizationConnection_Handler,
		},
		{
			MethodName: "GrantCrossOrganizationAccess",
			Handler:    _IdentityService_GrantCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "RevokeCrossOrganizationAccess",
			Handler:    _IdentityService_RevokeCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "ListUserCrossOrganizationAccess",
			Handler:    _IdentityService_ListUserCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _IdentityService_CreateInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _IdentityService_AcceptInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _IdentityService_ListInvitations_Handler,
		},
		{
			MethodName: "CancelInvitation",
			Handler:    _IdentityService_CancelInvitation_Handler,
		},
		{
			MethodName: "BindUserToOrganization",
			Handler:    _IdentityService_BindUserToOrganization_Handler,
		},
		{
			MethodName: "GetUserAccessContext",
			Handler:    _IdentityService_GetUserAccessContext_Handler,
		},
		{
			MethodName: "CanUserJoinOrganization",
			Handler:    _IdentityService_CanUserJoinOrganization_Handler,
		},
		{
			MethodName: "ValidateOrganizationAccess",
			Handler:    _IdentityService_ValidateOrganizationAccess_Handler,
		},
		{
			MethodName: "ValidateTeamAccess",
			Handler:    _IdentityService_ValidateTeamAccess_Handler,
		},
		{
			MethodName: "GetOrganizationByTeam",
			Handler:    _IdentityService_GetOrganizationByTeam_Handler,
		},
		{
			MethodName: "CleanupExpiredData",
			Handler:    _IdentityService_CleanupExpiredData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identity/v1/identity.proto",
}
