// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/identity/v1/identity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentityService_GetOrCreateUser_FullMethodName                 = "/identity.v1.IdentityService/GetOrCreateUser"
	IdentityService_GetUser_FullMethodName                         = "/identity.v1.IdentityService/GetUser"
	IdentityService_UpdateUser_FullMethodName                      = "/identity.v1.IdentityService/UpdateUser"
	IdentityService_CheckPermission_FullMethodName                 = "/identity.v1.IdentityService/CheckPermission"
	IdentityService_CheckOrganizationPermission_FullMethodName     = "/identity.v1.IdentityService/CheckOrganizationPermission"
	IdentityService_GetUserPermissions_FullMethodName              = "/identity.v1.IdentityService/GetUserPermissions"
	IdentityService_CreateOrganization_FullMethodName              = "/identity.v1.IdentityService/CreateOrganization"
	IdentityService_GetOrganization_FullMethodName                 = "/identity.v1.IdentityService/GetOrganization"
	IdentityService_UpdateOrganization_FullMethodName              = "/identity.v1.IdentityService/UpdateOrganization"
	IdentityService_DeleteOrganization_FullMethodName              = "/identity.v1.IdentityService/DeleteOrganization"
	IdentityService_ListUserOrganizations_FullMethodName           = "/identity.v1.IdentityService/ListUserOrganizations"
	IdentityService_GetOrganizationMembers_FullMethodName          = "/identity.v1.IdentityService/GetOrganizationMembers"
	IdentityService_GetTeamMembers_FullMethodName                  = "/identity.v1.IdentityService/GetTeamMembers"
	IdentityService_CreateTeam_FullMethodName                      = "/identity.v1.IdentityService/CreateTeam"
	IdentityService_GetTeam_FullMethodName                         = "/identity.v1.IdentityService/GetTeam"
	IdentityService_UpdateTeam_FullMethodName                      = "/identity.v1.IdentityService/UpdateTeam"
	IdentityService_DeleteTeam_FullMethodName                      = "/identity.v1.IdentityService/DeleteTeam"
	IdentityService_ListOrganizationTeams_FullMethodName           = "/identity.v1.IdentityService/ListOrganizationTeams"
	IdentityService_GetTeamHierarchy_FullMethodName                = "/identity.v1.IdentityService/GetTeamHierarchy"
	IdentityService_CreateOrganizationRole_FullMethodName          = "/identity.v1.IdentityService/CreateOrganizationRole"
	IdentityService_ListOrganizationRoles_FullMethodName           = "/identity.v1.IdentityService/ListOrganizationRoles"
	IdentityService_UpdateOrganizationRole_FullMethodName          = "/identity.v1.IdentityService/UpdateOrganizationRole"
	IdentityService_DeleteOrganizationRole_FullMethodName          = "/identity.v1.IdentityService/DeleteOrganizationRole"
	IdentityService_AddOrganizationMember_FullMethodName           = "/identity.v1.IdentityService/AddOrganizationMember"
	IdentityService_RemoveOrganizationMember_FullMethodName        = "/identity.v1.IdentityService/RemoveOrganizationMember"
	IdentityService_UpdateOrganizationMemberRole_FullMethodName    = "/identity.v1.IdentityService/UpdateOrganizationMemberRole"
	IdentityService_AddTeamMember_FullMethodName                   = "/identity.v1.IdentityService/AddTeamMember"
	IdentityService_RemoveTeamMember_FullMethodName                = "/identity.v1.IdentityService/RemoveTeamMember"
	IdentityService_UpdateTeamMemberRole_FullMethodName            = "/identity.v1.IdentityService/UpdateTeamMemberRole"
	IdentityService_CreateOrganizationConnection_FullMethodName    = "/identity.v1.IdentityService/CreateOrganizationConnection"
	IdentityService_ListConnectedOrganizations_FullMethodName      = "/identity.v1.IdentityService/ListConnectedOrganizations"
	IdentityService_UpdateOrganizationConnection_FullMethodName    = "/identity.v1.IdentityService/UpdateOrganizationConnection"
	IdentityService_DeleteOrganizationConnection_FullMethodName    = "/identity.v1.IdentityService/DeleteOrganizationConnection"
	IdentityService_GrantCrossOrganizationAccess_FullMethodName    = "/identity.v1.IdentityService/GrantCrossOrganizationAccess"
	IdentityService_RevokeCrossOrganizationAccess_FullMethodName   = "/identity.v1.IdentityService/RevokeCrossOrganizationAccess"
	IdentityService_ListUserCrossOrganizationAccess_FullMethodName = "/identity.v1.IdentityService/ListUserCrossOrganizationAccess"
	IdentityService_CreateInvitation_FullMethodName                = "/identity.v1.IdentityService/CreateInvitation"
	IdentityService_AcceptInvitation_FullMethodName                = "/identity.v1.IdentityService/AcceptInvitation"
	IdentityService_ListInvitations_FullMethodName                 = "/identity.v1.IdentityService/ListInvitations"
	IdentityService_CancelInvitation_FullMethodName                = "/identity.v1.IdentityService/CancelInvitation"
	IdentityService_BindUserToOrganization_FullMethodName          = "/identity.v1.IdentityService/BindUserToOrganization"
	IdentityService_GetUserAccessContext_FullMethodName            = "/identity.v1.IdentityService/GetUserAccessContext"
	IdentityService_CanUserJoinOrganization_FullMethodName         = "/identity.v1.IdentityService/CanUserJoinOrganization"
	IdentityService_ValidateOrganizationAccess_FullMethodName      = "/identity.v1.IdentityService/ValidateOrganizationAccess"
	IdentityService_ValidateTeamAccess_FullMethodName              = "/identity.v1.IdentityService/ValidateTeamAccess"
	IdentityService_GetOrganizationByTeam_FullMethodName           = "/identity.v1.IdentityService/GetOrganizationByTeam"
	IdentityService_CleanupExpiredData_FullMethodName              = "/identity.v1.IdentityService/CleanupExpiredData"
)

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IdentityService provides comprehensive identity and access management.
//
// This service handles:
// - User profile management and creation
// - Organization and team hierarchy management
// - Role-based access control (RBAC)
// - Cross-organization collaboration
// - Invitation and membership management
// - Enterprise user bindings
//
// Security:
// This service is internal-only and should not be exposed to external clients.
// All operations require proper service-to-service authentication.
//
// Data Model:
// Organizations contain Teams, which contain Users.
// Users can belong to multiple Organizations via memberships.
// Cross-organization access enables temporary collaboration.
//
// Example usage:
//
//	client := identity.NewIdentityServiceClient(conn)
//	org, err := client.CreateOrganization(ctx, &CreateOrganizationRequest{
//	  Name: "Acme Corp",
//	  Slug: "acme-corp",
//	  CreatedByUserId: userID,
//	})
type IdentityServiceClient interface {
	// GetOrCreateUser retrieves an existing user or creates a new one.
	//
	// This method is primarily used by the auth-service during:
	// - User registration flows
	// - Just-in-time (JIT) user provisioning
	// - SSO authentication with new users
	//
	// If the user doesn't exist, a new user profile is created with a default
	// organization and team assignment.
	//
	// Returns the user ID and their default organizational context.
	GetOrCreateUser(ctx context.Context, in *GetOrCreateUserRequest, opts ...grpc.CallOption) (*GetOrCreateUserResponse, error)
	// GetUser retrieves complete user profile information.
	//
	// The response includes the user's basic profile plus their organizational
	// context (organizations and teams they belong to).
	//
	// Use cases:
	//   - User profile pages
	//   - Administrative user management
	//   - Access control decisions
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// UpdateUser modifies user profile information.
	//
	// Only basic profile fields can be updated via this method:
	//   - Full name
	//   - Avatar URL
	//
	// Email changes require separate verification flows.
	// Organizational memberships are managed via separate RPCs.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// CheckPermission verifies if a user has a specific permission within a team.
	//
	// Team permissions are typically more granular and relate to specific
	// team resources like projects, deployments, or team management.
	//
	// Permission format: "resource:action" (e.g., "projects:deploy", "members:invite")
	//
	// The check considers:
	//   - User's role within the team
	//   - Organization-level permissions that may override team permissions
	//   - Inherited permissions from parent teams (if hierarchical)
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	// CheckOrganizationPermission verifies organization-level permissions.
	//
	// Organization permissions typically relate to:
	//   - Billing and subscription management
	//   - Organization-wide settings
	//   - Member and team management
	//   - Security and compliance settings
	//
	// Organization permissions generally supersede team-level permissions.
	CheckOrganizationPermission(ctx context.Context, in *CheckOrganizationPermissionRequest, opts ...grpc.CallOption) (*CheckOrganizationPermissionResponse, error)
	// GetUserPermissions retrieves all effective permissions for a user.
	//
	// This method provides a comprehensive view of what a user can do within
	// a specific organizational and/or team context.
	//
	// The response includes:
	//   - Direct organization permissions
	//   - Direct team permissions
	//   - Effective permissions (computed union with conflict resolution)
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	// CreateOrganization creates a new organization.
	//
	// The creator automatically becomes the organization owner and is assigned
	// to a default team within the organization.
	//
	// Organization creation includes:
	//   - Creating the organization record
	//   - Setting up default roles and permissions
	//   - Creating an initial team
	//   - Assigning the creator as owner
	//
	// The slug must be unique across the platform and URL-safe.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// GetOrganization retrieves detailed organization information.
	//
	// The response includes basic organization data plus aggregate statistics
	// like member count and team count for administrative purposes.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// UpdateOrganization modifies organization settings.
	//
	// Updatable fields include:
	//   - Display name
	//   - Description
	//   - Logo URL
	//   - Website URL
	//
	// The slug cannot be changed after creation to maintain URL stability.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// DeleteOrganization permanently removes an organization.
	//
	// This is a destructive operation that:
	//   - Removes all teams within the organization
	//   - Revokes all memberships
	//   - Cancels all pending invitations
	//   - Removes organization connections
	//
	// Prerequisites:
	//   - Caller must be organization owner
	//   - Organization must not have active external integrations
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// ListUserOrganizations returns all organizations a user can access.
	//
	// The response includes:
	//   - Organizations where user is a direct member
	//   - Connected organizations accessible via organization relationships
	//
	// Results are ordered by the user's access level (owner > admin > member).
	ListUserOrganizations(ctx context.Context, in *ListUserOrganizationsRequest, opts ...grpc.CallOption) (*ListUserOrganizationsResponse, error)
	// GetOrganizationMembers retrieves all members of an organization.
	//
	// The response includes each member's:
	//   - Basic profile information
	//   - Organization role
	//   - Join date
	//
	// Results are ordered by join date (newest first).
	GetOrganizationMembers(ctx context.Context, in *GetOrganizationMembersRequest, opts ...grpc.CallOption) (*GetOrganizationMembersResponse, error)
	// GetTeamMembers retrieves all members of a specific team.
	//
	// The response includes each member's:
	//   - Basic profile information (name, avatar)
	//   - Role within the team
	//   - Team join date
	//
	// Members are ordered by their role hierarchy (lead > member > observer).
	GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error)
	// CreateTeam creates a new team within an organization.
	//
	// Teams can be:
	//   - Root-level teams (no parent)
	//   - Child teams under existing teams (hierarchical)
	//
	// Team creation automatically:
	//   - Assigns the creator as team lead
	//   - Sets up default team roles
	//   - Calculates hierarchy depth and path
	//
	// Team names must be unique within their parent scope.
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	// GetTeam retrieves detailed information about a team.
	//
	// The response includes:
	//   - Team basic information
	//   - Parent organization details
	//   - Parent team (if hierarchical)
	//   - Direct child teams
	//
	// This provides complete context for understanding team relationships.
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	// UpdateTeam modifies team settings.
	//
	// Updatable fields:
	//   - Team name (must remain unique in scope)
	//   - Parent team (for reorganization)
	//
	// Changing parent team triggers hierarchy recalculation for all descendants.
	UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error)
	// DeleteTeam permanently removes a team.
	//
	// Prerequisites:
	//   - Team must not have child teams
	//   - All team members must be removed first
	//   - Caller must have team admin permissions
	//
	// This operation:
	//   - Removes the team record
	//   - Cancels pending team invitations
	//   - Archives team-specific audit logs
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	// ListOrganizationTeams returns teams within an organization.
	//
	// Filtering options:
	//   - All teams (if no parent_team_id specified)
	//   - Teams under a specific parent (if parent_team_id provided)
	//
	// Results are ordered by creation date (oldest first) to reflect
	// organizational growth patterns.
	ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error)
	// GetTeamHierarchy returns the complete team structure for an organization.
	//
	// The response is a tree structure showing:
	//   - Root teams at the top level
	//   - Nested child teams under their parents
	//   - Full hierarchy depth and relationships
	//
	// This is useful for:
	//   - Organizational charts
	//   - Permission inheritance calculations
	//   - Team navigation interfaces
	GetTeamHierarchy(ctx context.Context, in *GetTeamHierarchyRequest, opts ...grpc.CallOption) (*GetTeamHierarchyResponse, error)
	// CreateOrganizationRole creates a custom role within an organization.
	//
	// Custom roles allow organizations to define specific permission sets
	// beyond the default system roles (Owner, Admin, Member).
	//
	// Role creation includes:
	//   - Validating permission strings against known permissions
	//   - Ensuring role names are unique within the organization
	//   - Setting up audit logging for role usage
	//
	// Permission format: "resource:action" (e.g., "billing:view", "teams:create")
	CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error)
	// ListOrganizationRoles returns all roles available in an organization.
	//
	// The response includes:
	//   - System-defined roles (Owner, Admin, Member)
	//   - Custom organization-specific roles
	//
	// Roles are ordered by their privilege level (most privileged first).
	ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error)
	// UpdateOrganizationRole modifies an existing organization role.
	//
	// Updatable fields:
	//   - Role name (must remain unique)
	//   - Permission list
	//
	// Limitations:
	//   - System roles (Owner, Admin, Member) cannot be modified
	//   - Permission changes affect all users with this role immediately
	//   - Cannot remove permissions if it would leave users without critical access
	UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error)
	// DeleteOrganizationRole removes a custom organization role.
	//
	// Prerequisites:
	//   - Role must not be a system role
	//   - No users can be assigned this role
	//   - No pending invitations can reference this role
	//
	// Users previously assigned to this role are automatically reassigned
	// to the default "Member" role.
	DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error)
	// AddOrganizationMember adds a user to an organization.
	//
	// This operation:
	//   - Creates an organization membership record
	//   - Assigns the specified role to the user
	//   - Adds the user to the organization's default team (if applicable)
	//   - Sends welcome notifications
	//
	// Prerequisites:
	//   - User must exist in the system
	//   - Caller must have member management permissions
	//   - User must not already be a member
	AddOrganizationMember(ctx context.Context, in *AddOrganizationMemberRequest, opts ...grpc.CallOption) (*AddOrganizationMemberResponse, error)
	// RemoveOrganizationMember removes a user from an organization.
	//
	// This operation:
	//   - Removes the user from all teams within the organization
	//   - Revokes all organization-specific permissions
	//   - Cancels any pending invitations
	//   - Archives the user's organization activity
	//
	// Special cases:
	//   - Organization owners cannot be removed (must transfer ownership first)
	//   - Last admin cannot be removed (must assign another admin first)
	RemoveOrganizationMember(ctx context.Context, in *RemoveOrganizationMemberRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberResponse, error)
	// UpdateOrganizationMemberRole changes a user's role within an organization.
	//
	// Role changes:
	//   - Take effect immediately
	//   - May require additional security confirmations for privilege escalation
	//   - Are logged for audit purposes
	//
	// Restrictions:
	//   - Cannot demote the last organization owner
	//   - Self-role changes may be restricted by organization policy
	UpdateOrganizationMemberRole(ctx context.Context, in *UpdateOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationMemberRoleResponse, error)
	// AddTeamMember adds a user to a team.
	//
	// Prerequisites:
	//   - User must be a member of the team's organization
	//   - Caller must have team management permissions
	//   - Team must not have reached member limits (if configured)
	//
	// The user is assigned the specified role within the team context.
	AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberResponse, error)
	// RemoveTeamMember removes a user from a team.
	//
	// This operation:
	//   - Removes team-specific permissions
	//   - May trigger resource access reviews
	//   - Preserves the user's organization membership
	//
	// Special cases:
	//   - Team leads may require replacement before removal
	//   - Users may be automatically removed from child teams
	RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error)
	// UpdateTeamMemberRole changes a user's role within a team.
	//
	// Team role changes are generally less restricted than organization roles
	// but still require appropriate permissions from the caller.
	//
	// The change affects only the user's permissions within this specific team.
	UpdateTeamMemberRole(ctx context.Context, in *UpdateTeamMemberRoleRequest, opts ...grpc.CallOption) (*UpdateTeamMemberRoleResponse, error)
	// CreateOrganizationConnection establishes a relationship between organizations.
	//
	// Connection types include:
	//   - "partner": Business partnership for collaboration
	//   - "subsidiary": Parent-child corporate relationship
	//   - "vendor": Service provider relationship
	//   - "customer": Client relationship
	//
	// Connections enable:
	//   - Cross-organization visibility (with permission)
	//   - Simplified user access grants
	//   - Shared resource collaboration
	//   - Unified billing (for certain connection types)
	//
	// Both organizations must approve the connection before it becomes active.
	CreateOrganizationConnection(ctx context.Context, in *CreateOrganizationConnectionRequest, opts ...grpc.CallOption) (*CreateOrganizationConnectionResponse, error)
	// ListConnectedOrganizations returns all organizations connected to a given org.
	//
	// The response includes:
	//   - Connection type and status
	//   - Direction of the connection (is_source indicates if this org initiated it)
	//   - Creation date for audit purposes
	//
	// Results are grouped by connection type and ordered by creation date.
	ListConnectedOrganizations(ctx context.Context, in *ListConnectedOrganizationsRequest, opts ...grpc.CallOption) (*ListConnectedOrganizationsResponse, error)
	// UpdateOrganizationConnection modifies an existing connection.
	//
	// Updatable fields:
	//   - Connection type (with mutual agreement)
	//   - Status (active, inactive, pending)
	//
	// Status changes:
	//   - "pending" → "active": Requires approval from both organizations
	//   - "active" → "inactive": Can be done unilaterally, revokes access
	//   - "inactive" → "active": Requires re-approval process
	UpdateOrganizationConnection(ctx context.Context, in *UpdateOrganizationConnectionRequest, opts ...grpc.CallOption) (*UpdateOrganizationConnectionResponse, error)
	// DeleteOrganizationConnection permanently removes a connection.
	//
	// This operation:
	//   - Removes the connection record
	//   - Revokes all cross-organization access grants
	//   - Notifies both organizations
	//   - Archives connection history for audit
	//
	// Either organization can delete a connection unilaterally.
	DeleteOrganizationConnection(ctx context.Context, in *DeleteOrganizationConnectionRequest, opts ...grpc.CallOption) (*DeleteOrganizationConnectionResponse, error)
	// GrantCrossOrganizationAccess provides temporary access to another organization.
	//
	// This enables users from one organization to collaborate with another
	// without permanent membership transfer.
	//
	// Access levels:
	//   - "guest": Read-only access to specified resources
	//   - "member": Standard collaboration permissions
	//   - "admin": Elevated permissions for project management
	//
	// Prerequisites:
	//   - Organizations must be connected or have an active partnership
	//   - Granting user must have admin permissions in target organization
	//   - Target organization policies must allow cross-org access
	//
	// Access can be time-limited with automatic expiration.
	GrantCrossOrganizationAccess(ctx context.Context, in *GrantCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*GrantCrossOrganizationAccessResponse, error)
	// RevokeCrossOrganizationAccess removes cross-organization access.
	//
	// Revocation:
	//   - Takes effect immediately
	//   - Removes access to all resources in the target organization
	//   - Logs the revocation for audit purposes
	//   - Notifies the affected user
	//
	// Either the granting organization or the user's home organization
	// can revoke access.
	RevokeCrossOrganizationAccess(ctx context.Context, in *RevokeCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*RevokeCrossOrganizationAccessResponse, error)
	// ListUserCrossOrganizationAccess returns all cross-org access for a user.
	//
	// The response includes:
	//   - Target organizations and access levels
	//   - Expiration dates (if applicable)
	//   - Who granted the access
	//   - Current status (active, expired, revoked)
	//
	// This helps users understand their collaboration permissions and
	// administrators audit cross-organization relationships.
	ListUserCrossOrganizationAccess(ctx context.Context, in *ListUserCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*ListUserCrossOrganizationAccessResponse, error)
	// CreateInvitation creates an invitation for various types of access.
	//
	// Invitation types:
	//   - "organization": Invite to join an organization
	//   - "team": Invite to join a specific team
	//   - "cross_organization": Invite for cross-org collaboration
	//
	// Features:
	//   - Email-based invitations with secure tokens
	//   - Optional account creation for new users
	//   - Configurable expiration (default: 7 days)
	//   - Role assignment upon acceptance
	//
	// The invitation email includes context about the organization/team
	// and the permissions being granted.
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	// AcceptInvitation processes an invitation acceptance.
	//
	// This method handles:
	//   - Validating the invitation token and expiration
	//   - Creating user account (if requested and user doesn't exist)
	//   - Adding user to organization/team with specified role
	//   - Sending welcome notifications
	//
	// For new account creation:
	//   - User provides password during acceptance
	//   - Account is created with email from invitation
	//   - User is immediately added to the target organization/team
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	// ListInvitations retrieves invitations based on filter criteria.
	//
	// Filtering options:
	//   - By organization (all invitations for an org)
	//   - By team (team-specific invitations)
	//   - By email (invitations for a specific email address)
	//   - By status (pending, accepted, expired, cancelled)
	//
	// Results include invitation details and current status.
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	// CancelInvitation revokes a pending invitation.
	//
	// Cancellation:
	//   - Invalidates the invitation token
	//   - Prevents future acceptance
	//   - Logs the cancellation for audit
	//   - Optionally notifies the invitee
	//
	// Only pending invitations can be cancelled. Accepted invitations
	// require membership removal instead.
	CancelInvitation(ctx context.Context, in *CancelInvitationRequest, opts ...grpc.CallOption) (*CancelInvitationResponse, error)
	// BindUserToOrganization creates special enterprise user relationships.
	//
	// Enterprise bindings enable:
	//   - Cross-organization user management
	//   - Centralized access control
	//   - Automatic organization access based on user attributes
	//   - Simplified user provisioning for large enterprises
	//
	// Binding types:
	//   - "primary": User's main organizational affiliation
	//   - "secondary": Additional organizational access
	//   - "contractor": Temporary engagement with specific scope
	//
	// Enterprise users may have special privileges like automatic access
	// to connected organizations.
	BindUserToOrganization(ctx context.Context, in *BindUserToOrganizationRequest, opts ...grpc.CallOption) (*BindUserToOrganizationResponse, error)
	// GetUserAccessContext provides comprehensive access information.
	//
	// This method returns:
	//   - Primary organization affiliation
	//   - All accessible organizations (direct + connected)
	//   - All accessible teams across organizations
	//   - Enterprise user status and special privileges
	//
	// This is used for:
	//   - Session establishment
	//   - Access control decisions
	//   - UI personalization (showing available organizations/teams)
	GetUserAccessContext(ctx context.Context, in *GetUserAccessContextRequest, opts ...grpc.CallOption) (*GetUserAccessContextResponse, error)
	// CanUserJoinOrganization checks if a user is eligible to join an organization.
	//
	// This method considers:
	//   - Organization invitation policies
	//   - Email domain restrictions
	//   - Enterprise user bindings
	//   - Existing memberships and conflicts
	//   - Organization capacity limits
	//
	// The response includes the eligibility decision and reasoning,
	// which can be used to provide user-friendly error messages.
	CanUserJoinOrganization(ctx context.Context, in *CanUserJoinOrganizationRequest, opts ...grpc.CallOption) (*CanUserJoinOrganizationResponse, error)
	// ValidateOrganizationAccess verifies user access to an organization.
	//
	// This method checks:
	//   - Direct organization membership
	//   - Cross-organization access grants
	//   - Enterprise user bindings
	//   - Connected organization relationships
	//
	// Returns the access type and whether access is currently valid.
	// Used for authorization checks throughout the system.
	ValidateOrganizationAccess(ctx context.Context, in *ValidateOrganizationAccessRequest, opts ...grpc.CallOption) (*ValidateOrganizationAccessResponse, error)
	// ValidateTeamAccess verifies user access to a specific team.
	//
	// This method checks:
	//   - Direct team membership
	//   - Organization-level permissions that grant team access
	//   - Inherited access from parent teams (if hierarchical)
	//
	// Returns access status and the organization context for the team.
	ValidateTeamAccess(ctx context.Context, in *ValidateTeamAccessRequest, opts ...grpc.CallOption) (*ValidateTeamAccessResponse, error)
	// GetOrganizationByTeam retrieves the organization that owns a team.
	//
	// This utility method is helpful when you have a team ID but need
	// to determine the organizational context for permission checks
	// or navigation purposes.
	GetOrganizationByTeam(ctx context.Context, in *GetOrganizationByTeamRequest, opts ...grpc.CallOption) (*GetOrganizationByTeamResponse, error)
	// CleanupExpiredData removes expired invitations and access grants.
	//
	// This maintenance operation:
	//   - Removes invitations past their expiration date
	//   - Revokes expired cross-organization access
	//   - Archives historical data for compliance
	//   - Updates related audit logs
	//
	// Typically called by scheduled background jobs to maintain
	// data hygiene and security.
	CleanupExpiredData(ctx context.Context, in *CleanupExpiredDataRequest, opts ...grpc.CallOption) (*CleanupExpiredDataResponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) GetOrCreateUser(ctx context.Context, in *GetOrCreateUserRequest, opts ...grpc.CallOption) (*GetOrCreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrCreateUserResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrCreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, IdentityService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CheckOrganizationPermission(ctx context.Context, in *CheckOrganizationPermissionRequest, opts ...grpc.CallOption) (*CheckOrganizationPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOrganizationPermissionResponse)
	err := c.cc.Invoke(ctx, IdentityService_CheckOrganizationPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUserOrganizations(ctx context.Context, in *ListUserOrganizationsRequest, opts ...grpc.CallOption) (*ListUserOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserOrganizationsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListUserOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetOrganizationMembers(ctx context.Context, in *GetOrganizationMembersRequest, opts ...grpc.CallOption) (*GetOrganizationMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamMembersResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateTeam(ctx context.Context, in *UpdateTeamRequest, opts ...grpc.CallOption) (*UpdateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationTeamsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListOrganizationTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetTeamHierarchy(ctx context.Context, in *GetTeamHierarchyRequest, opts ...grpc.CallOption) (*GetTeamHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamHierarchyResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetTeamHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateOrganizationRole(ctx context.Context, in *CreateOrganizationRoleRequest, opts ...grpc.CallOption) (*CreateOrganizationRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListOrganizationRoles(ctx context.Context, in *ListOrganizationRolesRequest, opts ...grpc.CallOption) (*ListOrganizationRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationRolesResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListOrganizationRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganizationRole(ctx context.Context, in *UpdateOrganizationRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteOrganizationRole(ctx context.Context, in *DeleteOrganizationRoleRequest, opts ...grpc.CallOption) (*DeleteOrganizationRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteOrganizationRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddOrganizationMember(ctx context.Context, in *AddOrganizationMemberRequest, opts ...grpc.CallOption) (*AddOrganizationMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_AddOrganizationMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveOrganizationMember(ctx context.Context, in *RemoveOrganizationMemberRequest, opts ...grpc.CallOption) (*RemoveOrganizationMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOrganizationMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_RemoveOrganizationMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganizationMemberRole(ctx context.Context, in *UpdateOrganizationMemberRoleRequest, opts ...grpc.CallOption) (*UpdateOrganizationMemberRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationMemberRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganizationMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AddTeamMember(ctx context.Context, in *AddTeamMemberRequest, opts ...grpc.CallOption) (*AddTeamMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTeamMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_AddTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTeamMemberResponse)
	err := c.cc.Invoke(ctx, IdentityService_RemoveTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateTeamMemberRole(ctx context.Context, in *UpdateTeamMemberRoleRequest, opts ...grpc.CallOption) (*UpdateTeamMemberRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTeamMemberRoleResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateTeamMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateOrganizationConnection(ctx context.Context, in *CreateOrganizationConnectionRequest, opts ...grpc.CallOption) (*CreateOrganizationConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateOrganizationConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListConnectedOrganizations(ctx context.Context, in *ListConnectedOrganizationsRequest, opts ...grpc.CallOption) (*ListConnectedOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectedOrganizationsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListConnectedOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateOrganizationConnection(ctx context.Context, in *UpdateOrganizationConnectionRequest, opts ...grpc.CallOption) (*UpdateOrganizationConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_UpdateOrganizationConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteOrganizationConnection(ctx context.Context, in *DeleteOrganizationConnectionRequest, opts ...grpc.CallOption) (*DeleteOrganizationConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_DeleteOrganizationConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GrantCrossOrganizationAccess(ctx context.Context, in *GrantCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*GrantCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_GrantCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) RevokeCrossOrganizationAccess(ctx context.Context, in *RevokeCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*RevokeCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_RevokeCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListUserCrossOrganizationAccess(ctx context.Context, in *ListUserCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*ListUserCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListUserCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CreateInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, IdentityService_AcceptInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CancelInvitation(ctx context.Context, in *CancelInvitationRequest, opts ...grpc.CallOption) (*CancelInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelInvitationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CancelInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) BindUserToOrganization(ctx context.Context, in *BindUserToOrganizationRequest, opts ...grpc.CallOption) (*BindUserToOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindUserToOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_BindUserToOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUserAccessContext(ctx context.Context, in *GetUserAccessContextRequest, opts ...grpc.CallOption) (*GetUserAccessContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAccessContextResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUserAccessContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CanUserJoinOrganization(ctx context.Context, in *CanUserJoinOrganizationRequest, opts ...grpc.CallOption) (*CanUserJoinOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanUserJoinOrganizationResponse)
	err := c.cc.Invoke(ctx, IdentityService_CanUserJoinOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ValidateOrganizationAccess(ctx context.Context, in *ValidateOrganizationAccessRequest, opts ...grpc.CallOption) (*ValidateOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_ValidateOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ValidateTeamAccess(ctx context.Context, in *ValidateTeamAccessRequest, opts ...grpc.CallOption) (*ValidateTeamAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTeamAccessResponse)
	err := c.cc.Invoke(ctx, IdentityService_ValidateTeamAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetOrganizationByTeam(ctx context.Context, in *GetOrganizationByTeamRequest, opts ...grpc.CallOption) (*GetOrganizationByTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationByTeamResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetOrganizationByTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) CleanupExpiredData(ctx context.Context, in *CleanupExpiredDataRequest, opts ...grpc.CallOption) (*CleanupExpiredDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupExpiredDataResponse)
	err := c.cc.Invoke(ctx, IdentityService_CleanupExpiredData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility.
//
// IdentityService provides comprehensive identity and access management.
//
// This service handles:
// - User profile management and creation
// - Organization and team hierarchy management
// - Role-based access control (RBAC)
// - Cross-organization collaboration
// - Invitation and membership management
// - Enterprise user bindings
//
// Security:
// This service is internal-only and should not be exposed to external clients.
// All operations require proper service-to-service authentication.
//
// Data Model:
// Organizations contain Teams, which contain Users.
// Users can belong to multiple Organizations via memberships.
// Cross-organization access enables temporary collaboration.
//
// Example usage:
//
//	client := identity.NewIdentityServiceClient(conn)
//	org, err := client.CreateOrganization(ctx, &CreateOrganizationRequest{
//	  Name: "Acme Corp",
//	  Slug: "acme-corp",
//	  CreatedByUserId: userID,
//	})
type IdentityServiceServer interface {
	// GetOrCreateUser retrieves an existing user or creates a new one.
	//
	// This method is primarily used by the auth-service during:
	// - User registration flows
	// - Just-in-time (JIT) user provisioning
	// - SSO authentication with new users
	//
	// If the user doesn't exist, a new user profile is created with a default
	// organization and team assignment.
	//
	// Returns the user ID and their default organizational context.
	GetOrCreateUser(context.Context, *GetOrCreateUserRequest) (*GetOrCreateUserResponse, error)
	// GetUser retrieves complete user profile information.
	//
	// The response includes the user's basic profile plus their organizational
	// context (organizations and teams they belong to).
	//
	// Use cases:
	//   - User profile pages
	//   - Administrative user management
	//   - Access control decisions
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// UpdateUser modifies user profile information.
	//
	// Only basic profile fields can be updated via this method:
	//   - Full name
	//   - Avatar URL
	//
	// Email changes require separate verification flows.
	// Organizational memberships are managed via separate RPCs.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// CheckPermission verifies if a user has a specific permission within a team.
	//
	// Team permissions are typically more granular and relate to specific
	// team resources like projects, deployments, or team management.
	//
	// Permission format: "resource:action" (e.g., "projects:deploy", "members:invite")
	//
	// The check considers:
	//   - User's role within the team
	//   - Organization-level permissions that may override team permissions
	//   - Inherited permissions from parent teams (if hierarchical)
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	// CheckOrganizationPermission verifies organization-level permissions.
	//
	// Organization permissions typically relate to:
	//   - Billing and subscription management
	//   - Organization-wide settings
	//   - Member and team management
	//   - Security and compliance settings
	//
	// Organization permissions generally supersede team-level permissions.
	CheckOrganizationPermission(context.Context, *CheckOrganizationPermissionRequest) (*CheckOrganizationPermissionResponse, error)
	// GetUserPermissions retrieves all effective permissions for a user.
	//
	// This method provides a comprehensive view of what a user can do within
	// a specific organizational and/or team context.
	//
	// The response includes:
	//   - Direct organization permissions
	//   - Direct team permissions
	//   - Effective permissions (computed union with conflict resolution)
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	// CreateOrganization creates a new organization.
	//
	// The creator automatically becomes the organization owner and is assigned
	// to a default team within the organization.
	//
	// Organization creation includes:
	//   - Creating the organization record
	//   - Setting up default roles and permissions
	//   - Creating an initial team
	//   - Assigning the creator as owner
	//
	// The slug must be unique across the platform and URL-safe.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// GetOrganization retrieves detailed organization information.
	//
	// The response includes basic organization data plus aggregate statistics
	// like member count and team count for administrative purposes.
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// UpdateOrganization modifies organization settings.
	//
	// Updatable fields include:
	//   - Display name
	//   - Description
	//   - Logo URL
	//   - Website URL
	//
	// The slug cannot be changed after creation to maintain URL stability.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// DeleteOrganization permanently removes an organization.
	//
	// This is a destructive operation that:
	//   - Removes all teams within the organization
	//   - Revokes all memberships
	//   - Cancels all pending invitations
	//   - Removes organization connections
	//
	// Prerequisites:
	//   - Caller must be organization owner
	//   - Organization must not have active external integrations
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// ListUserOrganizations returns all organizations a user can access.
	//
	// The response includes:
	//   - Organizations where user is a direct member
	//   - Connected organizations accessible via organization relationships
	//
	// Results are ordered by the user's access level (owner > admin > member).
	ListUserOrganizations(context.Context, *ListUserOrganizationsRequest) (*ListUserOrganizationsResponse, error)
	// GetOrganizationMembers retrieves all members of an organization.
	//
	// The response includes each member's:
	//   - Basic profile information
	//   - Organization role
	//   - Join date
	//
	// Results are ordered by join date (newest first).
	GetOrganizationMembers(context.Context, *GetOrganizationMembersRequest) (*GetOrganizationMembersResponse, error)
	// GetTeamMembers retrieves all members of a specific team.
	//
	// The response includes each member's:
	//   - Basic profile information (name, avatar)
	//   - Role within the team
	//   - Team join date
	//
	// Members are ordered by their role hierarchy (lead > member > observer).
	GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error)
	// CreateTeam creates a new team within an organization.
	//
	// Teams can be:
	//   - Root-level teams (no parent)
	//   - Child teams under existing teams (hierarchical)
	//
	// Team creation automatically:
	//   - Assigns the creator as team lead
	//   - Sets up default team roles
	//   - Calculates hierarchy depth and path
	//
	// Team names must be unique within their parent scope.
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	// GetTeam retrieves detailed information about a team.
	//
	// The response includes:
	//   - Team basic information
	//   - Parent organization details
	//   - Parent team (if hierarchical)
	//   - Direct child teams
	//
	// This provides complete context for understanding team relationships.
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	// UpdateTeam modifies team settings.
	//
	// Updatable fields:
	//   - Team name (must remain unique in scope)
	//   - Parent team (for reorganization)
	//
	// Changing parent team triggers hierarchy recalculation for all descendants.
	UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error)
	// DeleteTeam permanently removes a team.
	//
	// Prerequisites:
	//   - Team must not have child teams
	//   - All team members must be removed first
	//   - Caller must have team admin permissions
	//
	// This operation:
	//   - Removes the team record
	//   - Cancels pending team invitations
	//   - Archives team-specific audit logs
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	// ListOrganizationTeams returns teams within an organization.
	//
	// Filtering options:
	//   - All teams (if no parent_team_id specified)
	//   - Teams under a specific parent (if parent_team_id provided)
	//
	// Results are ordered by creation date (oldest first) to reflect
	// organizational growth patterns.
	ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error)
	// GetTeamHierarchy returns the complete team structure for an organization.
	//
	// The response is a tree structure showing:
	//   - Root teams at the top level
	//   - Nested child teams under their parents
	//   - Full hierarchy depth and relationships
	//
	// This is useful for:
	//   - Organizational charts
	//   - Permission inheritance calculations
	//   - Team navigation interfaces
	GetTeamHierarchy(context.Context, *GetTeamHierarchyRequest) (*GetTeamHierarchyResponse, error)
	// CreateOrganizationRole creates a custom role within an organization.
	//
	// Custom roles allow organizations to define specific permission sets
	// beyond the default system roles (Owner, Admin, Member).
	//
	// Role creation includes:
	//   - Validating permission strings against known permissions
	//   - Ensuring role names are unique within the organization
	//   - Setting up audit logging for role usage
	//
	// Permission format: "resource:action" (e.g., "billing:view", "teams:create")
	CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error)
	// ListOrganizationRoles returns all roles available in an organization.
	//
	// The response includes:
	//   - System-defined roles (Owner, Admin, Member)
	//   - Custom organization-specific roles
	//
	// Roles are ordered by their privilege level (most privileged first).
	ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error)
	// UpdateOrganizationRole modifies an existing organization role.
	//
	// Updatable fields:
	//   - Role name (must remain unique)
	//   - Permission list
	//
	// Limitations:
	//   - System roles (Owner, Admin, Member) cannot be modified
	//   - Permission changes affect all users with this role immediately
	//   - Cannot remove permissions if it would leave users without critical access
	UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error)
	// DeleteOrganizationRole removes a custom organization role.
	//
	// Prerequisites:
	//   - Role must not be a system role
	//   - No users can be assigned this role
	//   - No pending invitations can reference this role
	//
	// Users previously assigned to this role are automatically reassigned
	// to the default "Member" role.
	DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error)
	// AddOrganizationMember adds a user to an organization.
	//
	// This operation:
	//   - Creates an organization membership record
	//   - Assigns the specified role to the user
	//   - Adds the user to the organization's default team (if applicable)
	//   - Sends welcome notifications
	//
	// Prerequisites:
	//   - User must exist in the system
	//   - Caller must have member management permissions
	//   - User must not already be a member
	AddOrganizationMember(context.Context, *AddOrganizationMemberRequest) (*AddOrganizationMemberResponse, error)
	// RemoveOrganizationMember removes a user from an organization.
	//
	// This operation:
	//   - Removes the user from all teams within the organization
	//   - Revokes all organization-specific permissions
	//   - Cancels any pending invitations
	//   - Archives the user's organization activity
	//
	// Special cases:
	//   - Organization owners cannot be removed (must transfer ownership first)
	//   - Last admin cannot be removed (must assign another admin first)
	RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error)
	// UpdateOrganizationMemberRole changes a user's role within an organization.
	//
	// Role changes:
	//   - Take effect immediately
	//   - May require additional security confirmations for privilege escalation
	//   - Are logged for audit purposes
	//
	// Restrictions:
	//   - Cannot demote the last organization owner
	//   - Self-role changes may be restricted by organization policy
	UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error)
	// AddTeamMember adds a user to a team.
	//
	// Prerequisites:
	//   - User must be a member of the team's organization
	//   - Caller must have team management permissions
	//   - Team must not have reached member limits (if configured)
	//
	// The user is assigned the specified role within the team context.
	AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error)
	// RemoveTeamMember removes a user from a team.
	//
	// This operation:
	//   - Removes team-specific permissions
	//   - May trigger resource access reviews
	//   - Preserves the user's organization membership
	//
	// Special cases:
	//   - Team leads may require replacement before removal
	//   - Users may be automatically removed from child teams
	RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error)
	// UpdateTeamMemberRole changes a user's role within a team.
	//
	// Team role changes are generally less restricted than organization roles
	// but still require appropriate permissions from the caller.
	//
	// The change affects only the user's permissions within this specific team.
	UpdateTeamMemberRole(context.Context, *UpdateTeamMemberRoleRequest) (*UpdateTeamMemberRoleResponse, error)
	// CreateOrganizationConnection establishes a relationship between organizations.
	//
	// Connection types include:
	//   - "partner": Business partnership for collaboration
	//   - "subsidiary": Parent-child corporate relationship
	//   - "vendor": Service provider relationship
	//   - "customer": Client relationship
	//
	// Connections enable:
	//   - Cross-organization visibility (with permission)
	//   - Simplified user access grants
	//   - Shared resource collaboration
	//   - Unified billing (for certain connection types)
	//
	// Both organizations must approve the connection before it becomes active.
	CreateOrganizationConnection(context.Context, *CreateOrganizationConnectionRequest) (*CreateOrganizationConnectionResponse, error)
	// ListConnectedOrganizations returns all organizations connected to a given org.
	//
	// The response includes:
	//   - Connection type and status
	//   - Direction of the connection (is_source indicates if this org initiated it)
	//   - Creation date for audit purposes
	//
	// Results are grouped by connection type and ordered by creation date.
	ListConnectedOrganizations(context.Context, *ListConnectedOrganizationsRequest) (*ListConnectedOrganizationsResponse, error)
	// UpdateOrganizationConnection modifies an existing connection.
	//
	// Updatable fields:
	//   - Connection type (with mutual agreement)
	//   - Status (active, inactive, pending)
	//
	// Status changes:
	//   - "pending" → "active": Requires approval from both organizations
	//   - "active" → "inactive": Can be done unilaterally, revokes access
	//   - "inactive" → "active": Requires re-approval process
	UpdateOrganizationConnection(context.Context, *UpdateOrganizationConnectionRequest) (*UpdateOrganizationConnectionResponse, error)
	// DeleteOrganizationConnection permanently removes a connection.
	//
	// This operation:
	//   - Removes the connection record
	//   - Revokes all cross-organization access grants
	//   - Notifies both organizations
	//   - Archives connection history for audit
	//
	// Either organization can delete a connection unilaterally.
	DeleteOrganizationConnection(context.Context, *DeleteOrganizationConnectionRequest) (*DeleteOrganizationConnectionResponse, error)
	// GrantCrossOrganizationAccess provides temporary access to another organization.
	//
	// This enables users from one organization to collaborate with another
	// without permanent membership transfer.
	//
	// Access levels:
	//   - "guest": Read-only access to specified resources
	//   - "member": Standard collaboration permissions
	//   - "admin": Elevated permissions for project management
	//
	// Prerequisites:
	//   - Organizations must be connected or have an active partnership
	//   - Granting user must have admin permissions in target organization
	//   - Target organization policies must allow cross-org access
	//
	// Access can be time-limited with automatic expiration.
	GrantCrossOrganizationAccess(context.Context, *GrantCrossOrganizationAccessRequest) (*GrantCrossOrganizationAccessResponse, error)
	// RevokeCrossOrganizationAccess removes cross-organization access.
	//
	// Revocation:
	//   - Takes effect immediately
	//   - Removes access to all resources in the target organization
	//   - Logs the revocation for audit purposes
	//   - Notifies the affected user
	//
	// Either the granting organization or the user's home organization
	// can revoke access.
	RevokeCrossOrganizationAccess(context.Context, *RevokeCrossOrganizationAccessRequest) (*RevokeCrossOrganizationAccessResponse, error)
	// ListUserCrossOrganizationAccess returns all cross-org access for a user.
	//
	// The response includes:
	//   - Target organizations and access levels
	//   - Expiration dates (if applicable)
	//   - Who granted the access
	//   - Current status (active, expired, revoked)
	//
	// This helps users understand their collaboration permissions and
	// administrators audit cross-organization relationships.
	ListUserCrossOrganizationAccess(context.Context, *ListUserCrossOrganizationAccessRequest) (*ListUserCrossOrganizationAccessResponse, error)
	// CreateInvitation creates an invitation for various types of access.
	//
	// Invitation types:
	//   - "organization": Invite to join an organization
	//   - "team": Invite to join a specific team
	//   - "cross_organization": Invite for cross-org collaboration
	//
	// Features:
	//   - Email-based invitations with secure tokens
	//   - Optional account creation for new users
	//   - Configurable expiration (default: 7 days)
	//   - Role assignment upon acceptance
	//
	// The invitation email includes context about the organization/team
	// and the permissions being granted.
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	// AcceptInvitation processes an invitation acceptance.
	//
	// This method handles:
	//   - Validating the invitation token and expiration
	//   - Creating user account (if requested and user doesn't exist)
	//   - Adding user to organization/team with specified role
	//   - Sending welcome notifications
	//
	// For new account creation:
	//   - User provides password during acceptance
	//   - Account is created with email from invitation
	//   - User is immediately added to the target organization/team
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	// ListInvitations retrieves invitations based on filter criteria.
	//
	// Filtering options:
	//   - By organization (all invitations for an org)
	//   - By team (team-specific invitations)
	//   - By email (invitations for a specific email address)
	//   - By status (pending, accepted, expired, cancelled)
	//
	// Results include invitation details and current status.
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	// CancelInvitation revokes a pending invitation.
	//
	// Cancellation:
	//   - Invalidates the invitation token
	//   - Prevents future acceptance
	//   - Logs the cancellation for audit
	//   - Optionally notifies the invitee
	//
	// Only pending invitations can be cancelled. Accepted invitations
	// require membership removal instead.
	CancelInvitation(context.Context, *CancelInvitationRequest) (*CancelInvitationResponse, error)
	// BindUserToOrganization creates special enterprise user relationships.
	//
	// Enterprise bindings enable:
	//   - Cross-organization user management
	//   - Centralized access control
	//   - Automatic organization access based on user attributes
	//   - Simplified user provisioning for large enterprises
	//
	// Binding types:
	//   - "primary": User's main organizational affiliation
	//   - "secondary": Additional organizational access
	//   - "contractor": Temporary engagement with specific scope
	//
	// Enterprise users may have special privileges like automatic access
	// to connected organizations.
	BindUserToOrganization(context.Context, *BindUserToOrganizationRequest) (*BindUserToOrganizationResponse, error)
	// GetUserAccessContext provides comprehensive access information.
	//
	// This method returns:
	//   - Primary organization affiliation
	//   - All accessible organizations (direct + connected)
	//   - All accessible teams across organizations
	//   - Enterprise user status and special privileges
	//
	// This is used for:
	//   - Session establishment
	//   - Access control decisions
	//   - UI personalization (showing available organizations/teams)
	GetUserAccessContext(context.Context, *GetUserAccessContextRequest) (*GetUserAccessContextResponse, error)
	// CanUserJoinOrganization checks if a user is eligible to join an organization.
	//
	// This method considers:
	//   - Organization invitation policies
	//   - Email domain restrictions
	//   - Enterprise user bindings
	//   - Existing memberships and conflicts
	//   - Organization capacity limits
	//
	// The response includes the eligibility decision and reasoning,
	// which can be used to provide user-friendly error messages.
	CanUserJoinOrganization(context.Context, *CanUserJoinOrganizationRequest) (*CanUserJoinOrganizationResponse, error)
	// ValidateOrganizationAccess verifies user access to an organization.
	//
	// This method checks:
	//   - Direct organization membership
	//   - Cross-organization access grants
	//   - Enterprise user bindings
	//   - Connected organization relationships
	//
	// Returns the access type and whether access is currently valid.
	// Used for authorization checks throughout the system.
	ValidateOrganizationAccess(context.Context, *ValidateOrganizationAccessRequest) (*ValidateOrganizationAccessResponse, error)
	// ValidateTeamAccess verifies user access to a specific team.
	//
	// This method checks:
	//   - Direct team membership
	//   - Organization-level permissions that grant team access
	//   - Inherited access from parent teams (if hierarchical)
	//
	// Returns access status and the organization context for the team.
	ValidateTeamAccess(context.Context, *ValidateTeamAccessRequest) (*ValidateTeamAccessResponse, error)
	// GetOrganizationByTeam retrieves the organization that owns a team.
	//
	// This utility method is helpful when you have a team ID but need
	// to determine the organizational context for permission checks
	// or navigation purposes.
	GetOrganizationByTeam(context.Context, *GetOrganizationByTeamRequest) (*GetOrganizationByTeamResponse, error)
	// CleanupExpiredData removes expired invitations and access grants.
	//
	// This maintenance operation:
	//   - Removes invitations past their expiration date
	//   - Revokes expired cross-organization access
	//   - Archives historical data for compliance
	//   - Updates related audit logs
	//
	// Typically called by scheduled background jobs to maintain
	// data hygiene and security.
	CleanupExpiredData(context.Context, *CleanupExpiredDataRequest) (*CleanupExpiredDataResponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityServiceServer struct{}

func (UnimplementedIdentityServiceServer) GetOrCreateUser(context.Context, *GetOrCreateUserRequest) (*GetOrCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateUser not implemented")
}
func (UnimplementedIdentityServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedIdentityServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedIdentityServiceServer) CheckOrganizationPermission(context.Context, *CheckOrganizationPermissionRequest) (*CheckOrganizationPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrganizationPermission not implemented")
}
func (UnimplementedIdentityServiceServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedIdentityServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) ListUserOrganizations(context.Context, *ListUserOrganizationsRequest) (*ListUserOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOrganizations not implemented")
}
func (UnimplementedIdentityServiceServer) GetOrganizationMembers(context.Context, *GetOrganizationMembersRequest) (*GetOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembers not implemented")
}
func (UnimplementedIdentityServiceServer) GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembers not implemented")
}
func (UnimplementedIdentityServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedIdentityServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateTeam(context.Context, *UpdateTeamRequest) (*UpdateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedIdentityServiceServer) ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationTeams not implemented")
}
func (UnimplementedIdentityServiceServer) GetTeamHierarchy(context.Context, *GetTeamHierarchyRequest) (*GetTeamHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamHierarchy not implemented")
}
func (UnimplementedIdentityServiceServer) CreateOrganizationRole(context.Context, *CreateOrganizationRoleRequest) (*CreateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationRole not implemented")
}
func (UnimplementedIdentityServiceServer) ListOrganizationRoles(context.Context, *ListOrganizationRolesRequest) (*ListOrganizationRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationRoles not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganizationRole(context.Context, *UpdateOrganizationRoleRequest) (*UpdateOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationRole not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteOrganizationRole(context.Context, *DeleteOrganizationRoleRequest) (*DeleteOrganizationRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationRole not implemented")
}
func (UnimplementedIdentityServiceServer) AddOrganizationMember(context.Context, *AddOrganizationMemberRequest) (*AddOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganizationMember not implemented")
}
func (UnimplementedIdentityServiceServer) RemoveOrganizationMember(context.Context, *RemoveOrganizationMemberRequest) (*RemoveOrganizationMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganizationMember not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganizationMemberRole(context.Context, *UpdateOrganizationMemberRoleRequest) (*UpdateOrganizationMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMemberRole not implemented")
}
func (UnimplementedIdentityServiceServer) AddTeamMember(context.Context, *AddTeamMemberRequest) (*AddTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMember not implemented")
}
func (UnimplementedIdentityServiceServer) RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMember not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateTeamMemberRole(context.Context, *UpdateTeamMemberRoleRequest) (*UpdateTeamMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamMemberRole not implemented")
}
func (UnimplementedIdentityServiceServer) CreateOrganizationConnection(context.Context, *CreateOrganizationConnectionRequest) (*CreateOrganizationConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationConnection not implemented")
}
func (UnimplementedIdentityServiceServer) ListConnectedOrganizations(context.Context, *ListConnectedOrganizationsRequest) (*ListConnectedOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedOrganizations not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateOrganizationConnection(context.Context, *UpdateOrganizationConnectionRequest) (*UpdateOrganizationConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationConnection not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteOrganizationConnection(context.Context, *DeleteOrganizationConnectionRequest) (*DeleteOrganizationConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationConnection not implemented")
}
func (UnimplementedIdentityServiceServer) GrantCrossOrganizationAccess(context.Context, *GrantCrossOrganizationAccessRequest) (*GrantCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantCrossOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) RevokeCrossOrganizationAccess(context.Context, *RevokeCrossOrganizationAccessRequest) (*RevokeCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCrossOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) ListUserCrossOrganizationAccess(context.Context, *ListUserCrossOrganizationAccessRequest) (*ListUserCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCrossOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedIdentityServiceServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedIdentityServiceServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedIdentityServiceServer) CancelInvitation(context.Context, *CancelInvitationRequest) (*CancelInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvitation not implemented")
}
func (UnimplementedIdentityServiceServer) BindUserToOrganization(context.Context, *BindUserToOrganizationRequest) (*BindUserToOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindUserToOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) GetUserAccessContext(context.Context, *GetUserAccessContextRequest) (*GetUserAccessContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccessContext not implemented")
}
func (UnimplementedIdentityServiceServer) CanUserJoinOrganization(context.Context, *CanUserJoinOrganizationRequest) (*CanUserJoinOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanUserJoinOrganization not implemented")
}
func (UnimplementedIdentityServiceServer) ValidateOrganizationAccess(context.Context, *ValidateOrganizationAccessRequest) (*ValidateOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrganizationAccess not implemented")
}
func (UnimplementedIdentityServiceServer) ValidateTeamAccess(context.Context, *ValidateTeamAccessRequest) (*ValidateTeamAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTeamAccess not implemented")
}
func (UnimplementedIdentityServiceServer) GetOrganizationByTeam(context.Context, *GetOrganizationByTeamRequest) (*GetOrganizationByTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationByTeam not implemented")
}
func (UnimplementedIdentityServiceServer) CleanupExpiredData(context.Context, *CleanupExpiredDataRequest) (*CleanupExpiredDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupExpiredData not implemented")
}
func (UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}
func (UnimplementedIdentityServiceServer) testEmbeddedByValue()                         {}

// UnsafeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceServer will
// result in compilation errors.
type UnsafeIdentityServiceServer interface {
	mustEmbedUnimplementedIdentityServiceServer()
}

func RegisterIdentityServiceServer(s grpc.ServiceRegistrar, srv IdentityServiceServer) {
	// If the following call pancis, it indicates UnimplementedIdentityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentityService_ServiceDesc, srv)
}

func _IdentityService_GetOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrCreateUser(ctx, req.(*GetOrCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CheckOrganizationPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOrganizationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CheckOrganizationPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CheckOrganizationPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CheckOrganizationPermission(ctx, req.(*CheckOrganizationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUserOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUserOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListUserOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUserOrganizations(ctx, req.(*ListUserOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrganizationMembers(ctx, req.(*GetOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetTeamMembers(ctx, req.(*GetTeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateTeam(ctx, req.(*UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListOrganizationTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListOrganizationTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListOrganizationTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListOrganizationTeams(ctx, req.(*ListOrganizationTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetTeamHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetTeamHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetTeamHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetTeamHierarchy(ctx, req.(*GetTeamHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateOrganizationRole(ctx, req.(*CreateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListOrganizationRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListOrganizationRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListOrganizationRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListOrganizationRoles(ctx, req.(*ListOrganizationRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganizationRole(ctx, req.(*UpdateOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteOrganizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteOrganizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteOrganizationRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteOrganizationRole(ctx, req.(*DeleteOrganizationRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_AddOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddOrganizationMember(ctx, req.(*AddOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrganizationMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RemoveOrganizationMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveOrganizationMember(ctx, req.(*RemoveOrganizationMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganizationMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganizationMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganizationMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganizationMemberRole(ctx, req.(*UpdateOrganizationMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AddTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AddTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_AddTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AddTeamMember(ctx, req.(*AddTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RemoveTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RemoveTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RemoveTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RemoveTeamMember(ctx, req.(*RemoveTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateTeamMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateTeamMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateTeamMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateTeamMemberRole(ctx, req.(*UpdateTeamMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateOrganizationConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateOrganizationConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateOrganizationConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateOrganizationConnection(ctx, req.(*CreateOrganizationConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListConnectedOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectedOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListConnectedOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListConnectedOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListConnectedOrganizations(ctx, req.(*ListConnectedOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateOrganizationConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateOrganizationConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateOrganizationConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateOrganizationConnection(ctx, req.(*UpdateOrganizationConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteOrganizationConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteOrganizationConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteOrganizationConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteOrganizationConnection(ctx, req.(*DeleteOrganizationConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GrantCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GrantCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GrantCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GrantCrossOrganizationAccess(ctx, req.(*GrantCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_RevokeCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).RevokeCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_RevokeCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).RevokeCrossOrganizationAccess(ctx, req.(*RevokeCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListUserCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListUserCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListUserCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListUserCrossOrganizationAccess(ctx, req.(*ListUserCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CreateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CancelInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CancelInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CancelInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CancelInvitation(ctx, req.(*CancelInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_BindUserToOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserToOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).BindUserToOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_BindUserToOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).BindUserToOrganization(ctx, req.(*BindUserToOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUserAccessContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccessContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUserAccessContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUserAccessContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUserAccessContext(ctx, req.(*GetUserAccessContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CanUserJoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanUserJoinOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CanUserJoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CanUserJoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CanUserJoinOrganization(ctx, req.(*CanUserJoinOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ValidateOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ValidateOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ValidateOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ValidateOrganizationAccess(ctx, req.(*ValidateOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ValidateTeamAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTeamAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ValidateTeamAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ValidateTeamAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ValidateTeamAccess(ctx, req.(*ValidateTeamAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetOrganizationByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationByTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetOrganizationByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetOrganizationByTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetOrganizationByTeam(ctx, req.(*GetOrganizationByTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_CleanupExpiredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupExpiredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).CleanupExpiredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_CleanupExpiredData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).CleanupExpiredData(ctx, req.(*CleanupExpiredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityService_ServiceDesc is the grpc.ServiceDesc for IdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.v1.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrCreateUser",
			Handler:    _IdentityService_GetOrCreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IdentityService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IdentityService_UpdateUser_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _IdentityService_CheckPermission_Handler,
		},
		{
			MethodName: "CheckOrganizationPermission",
			Handler:    _IdentityService_CheckOrganizationPermission_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _IdentityService_GetUserPermissions_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _IdentityService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _IdentityService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _IdentityService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _IdentityService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListUserOrganizations",
			Handler:    _IdentityService_ListUserOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationMembers",
			Handler:    _IdentityService_GetOrganizationMembers_Handler,
		},
		{
			MethodName: "GetTeamMembers",
			Handler:    _IdentityService_GetTeamMembers_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _IdentityService_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _IdentityService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _IdentityService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _IdentityService_DeleteTeam_Handler,
		},
		{
			MethodName: "ListOrganizationTeams",
			Handler:    _IdentityService_ListOrganizationTeams_Handler,
		},
		{
			MethodName: "GetTeamHierarchy",
			Handler:    _IdentityService_GetTeamHierarchy_Handler,
		},
		{
			MethodName: "CreateOrganizationRole",
			Handler:    _IdentityService_CreateOrganizationRole_Handler,
		},
		{
			MethodName: "ListOrganizationRoles",
			Handler:    _IdentityService_ListOrganizationRoles_Handler,
		},
		{
			MethodName: "UpdateOrganizationRole",
			Handler:    _IdentityService_UpdateOrganizationRole_Handler,
		},
		{
			MethodName: "DeleteOrganizationRole",
			Handler:    _IdentityService_DeleteOrganizationRole_Handler,
		},
		{
			MethodName: "AddOrganizationMember",
			Handler:    _IdentityService_AddOrganizationMember_Handler,
		},
		{
			MethodName: "RemoveOrganizationMember",
			Handler:    _IdentityService_RemoveOrganizationMember_Handler,
		},
		{
			MethodName: "UpdateOrganizationMemberRole",
			Handler:    _IdentityService_UpdateOrganizationMemberRole_Handler,
		},
		{
			MethodName: "AddTeamMember",
			Handler:    _IdentityService_AddTeamMember_Handler,
		},
		{
			MethodName: "RemoveTeamMember",
			Handler:    _IdentityService_RemoveTeamMember_Handler,
		},
		{
			MethodName: "UpdateTeamMemberRole",
			Handler:    _IdentityService_UpdateTeamMemberRole_Handler,
		},
		{
			MethodName: "CreateOrganizationConnection",
			Handler:    _IdentityService_CreateOrganizationConnection_Handler,
		},
		{
			MethodName: "ListConnectedOrganizations",
			Handler:    _IdentityService_ListConnectedOrganizations_Handler,
		},
		{
			MethodName: "UpdateOrganizationConnection",
			Handler:    _IdentityService_UpdateOrganizationConnection_Handler,
		},
		{
			MethodName: "DeleteOrganizationConnection",
			Handler:    _IdentityService_DeleteOrganizationConnection_Handler,
		},
		{
			MethodName: "GrantCrossOrganizationAccess",
			Handler:    _IdentityService_GrantCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "RevokeCrossOrganizationAccess",
			Handler:    _IdentityService_RevokeCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "ListUserCrossOrganizationAccess",
			Handler:    _IdentityService_ListUserCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _IdentityService_CreateInvitation_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _IdentityService_AcceptInvitation_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _IdentityService_ListInvitations_Handler,
		},
		{
			MethodName: "CancelInvitation",
			Handler:    _IdentityService_CancelInvitation_Handler,
		},
		{
			MethodName: "BindUserToOrganization",
			Handler:    _IdentityService_BindUserToOrganization_Handler,
		},
		{
			MethodName: "GetUserAccessContext",
			Handler:    _IdentityService_GetUserAccessContext_Handler,
		},
		{
			MethodName: "CanUserJoinOrganization",
			Handler:    _IdentityService_CanUserJoinOrganization_Handler,
		},
		{
			MethodName: "ValidateOrganizationAccess",
			Handler:    _IdentityService_ValidateOrganizationAccess_Handler,
		},
		{
			MethodName: "ValidateTeamAccess",
			Handler:    _IdentityService_ValidateTeamAccess_Handler,
		},
		{
			MethodName: "GetOrganizationByTeam",
			Handler:    _IdentityService_GetOrganizationByTeam_Handler,
		},
		{
			MethodName: "CleanupExpiredData",
			Handler:    _IdentityService_CleanupExpiredData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identity/v1/identity.proto",
}
