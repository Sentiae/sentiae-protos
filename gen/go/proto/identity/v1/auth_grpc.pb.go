// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/identity/v1/auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthServiceInterface_ValidateToken_FullMethodName = "/identity.v1.AuthServiceInterface/ValidateToken"
	AuthServiceInterface_GetUsersBatch_FullMethodName = "/identity.v1.AuthServiceInterface/GetUsersBatch"
	AuthServiceInterface_RegisterUser_FullMethodName  = "/identity.v1.AuthServiceInterface/RegisterUser"
)

// AuthServiceInterfaceClient is the client API for AuthServiceInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthServiceInterface - Expected interface from auth-service
type AuthServiceInterfaceClient interface {
	// Validates a JWT and returns its claims.
	ValidateToken(ctx context.Context, in *AuthValidateTokenRequest, opts ...grpc.CallOption) (*AuthValidateTokenResponse, error)
	// Retrieves user details for a batch of user IDs.
	GetUsersBatch(ctx context.Context, in *AuthGetUsersBatchRequest, opts ...grpc.CallOption) (*AuthGetUsersBatchResponse, error)
	// Registers a new user account (for invitation-based account creation).
	RegisterUser(ctx context.Context, in *AuthRegisterUserRequest, opts ...grpc.CallOption) (*AuthRegisterUserResponse, error)
}

type authServiceInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceInterfaceClient(cc grpc.ClientConnInterface) AuthServiceInterfaceClient {
	return &authServiceInterfaceClient{cc}
}

func (c *authServiceInterfaceClient) ValidateToken(ctx context.Context, in *AuthValidateTokenRequest, opts ...grpc.CallOption) (*AuthValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthValidateTokenResponse)
	err := c.cc.Invoke(ctx, AuthServiceInterface_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceInterfaceClient) GetUsersBatch(ctx context.Context, in *AuthGetUsersBatchRequest, opts ...grpc.CallOption) (*AuthGetUsersBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthGetUsersBatchResponse)
	err := c.cc.Invoke(ctx, AuthServiceInterface_GetUsersBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceInterfaceClient) RegisterUser(ctx context.Context, in *AuthRegisterUserRequest, opts ...grpc.CallOption) (*AuthRegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthRegisterUserResponse)
	err := c.cc.Invoke(ctx, AuthServiceInterface_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceInterfaceServer is the server API for AuthServiceInterface service.
// All implementations must embed UnimplementedAuthServiceInterfaceServer
// for forward compatibility.
//
// AuthServiceInterface - Expected interface from auth-service
type AuthServiceInterfaceServer interface {
	// Validates a JWT and returns its claims.
	ValidateToken(context.Context, *AuthValidateTokenRequest) (*AuthValidateTokenResponse, error)
	// Retrieves user details for a batch of user IDs.
	GetUsersBatch(context.Context, *AuthGetUsersBatchRequest) (*AuthGetUsersBatchResponse, error)
	// Registers a new user account (for invitation-based account creation).
	RegisterUser(context.Context, *AuthRegisterUserRequest) (*AuthRegisterUserResponse, error)
	mustEmbedUnimplementedAuthServiceInterfaceServer()
}

// UnimplementedAuthServiceInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceInterfaceServer struct{}

func (UnimplementedAuthServiceInterfaceServer) ValidateToken(context.Context, *AuthValidateTokenRequest) (*AuthValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthServiceInterfaceServer) GetUsersBatch(context.Context, *AuthGetUsersBatchRequest) (*AuthGetUsersBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersBatch not implemented")
}
func (UnimplementedAuthServiceInterfaceServer) RegisterUser(context.Context, *AuthRegisterUserRequest) (*AuthRegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthServiceInterfaceServer) mustEmbedUnimplementedAuthServiceInterfaceServer() {}
func (UnimplementedAuthServiceInterfaceServer) testEmbeddedByValue()                              {}

// UnsafeAuthServiceInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceInterfaceServer will
// result in compilation errors.
type UnsafeAuthServiceInterfaceServer interface {
	mustEmbedUnimplementedAuthServiceInterfaceServer()
}

func RegisterAuthServiceInterfaceServer(s grpc.ServiceRegistrar, srv AuthServiceInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthServiceInterface_ServiceDesc, srv)
}

func _AuthServiceInterface_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceInterfaceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceInterface_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceInterfaceServer).ValidateToken(ctx, req.(*AuthValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceInterface_GetUsersBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthGetUsersBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceInterfaceServer).GetUsersBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceInterface_GetUsersBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceInterfaceServer).GetUsersBatch(ctx, req.(*AuthGetUsersBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServiceInterface_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceInterfaceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServiceInterface_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceInterfaceServer).RegisterUser(ctx, req.(*AuthRegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServiceInterface_ServiceDesc is the grpc.ServiceDesc for AuthServiceInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServiceInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.v1.AuthServiceInterface",
	HandlerType: (*AuthServiceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _AuthServiceInterface_ValidateToken_Handler,
		},
		{
			MethodName: "GetUsersBatch",
			Handler:    _AuthServiceInterface_GetUsersBatch_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _AuthServiceInterface_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/identity/v1/auth.proto",
}
