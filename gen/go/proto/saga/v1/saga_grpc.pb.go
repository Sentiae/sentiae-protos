// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/saga/v1/saga.proto

package sagav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SagaOrchestrationService_StartSaga_FullMethodName      = "/saga.v1.SagaOrchestrationService/StartSaga"
	SagaOrchestrationService_ExecuteStep_FullMethodName    = "/saga.v1.SagaOrchestrationService/ExecuteStep"
	SagaOrchestrationService_CompleteStep_FullMethodName   = "/saga.v1.SagaOrchestrationService/CompleteStep"
	SagaOrchestrationService_FailStep_FullMethodName       = "/saga.v1.SagaOrchestrationService/FailStep"
	SagaOrchestrationService_CompensateSaga_FullMethodName = "/saga.v1.SagaOrchestrationService/CompensateSaga"
	SagaOrchestrationService_GetSagaStatus_FullMethodName  = "/saga.v1.SagaOrchestrationService/GetSagaStatus"
	SagaOrchestrationService_ListSagas_FullMethodName      = "/saga.v1.SagaOrchestrationService/ListSagas"
	SagaOrchestrationService_RecoverSagas_FullMethodName   = "/saga.v1.SagaOrchestrationService/RecoverSagas"
)

// SagaOrchestrationServiceClient is the client API for SagaOrchestrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Saga orchestration service for managing distributed transactions
type SagaOrchestrationServiceClient interface {
	// Start a new saga
	StartSaga(ctx context.Context, in *StartSagaRequest, opts ...grpc.CallOption) (*StartSagaResponse, error)
	// Execute next step in saga
	ExecuteStep(ctx context.Context, in *ExecuteStepRequest, opts ...grpc.CallOption) (*ExecuteStepResponse, error)
	// Complete a step
	CompleteStep(ctx context.Context, in *CompleteStepRequest, opts ...grpc.CallOption) (*CompleteStepResponse, error)
	// Mark a step as failed
	FailStep(ctx context.Context, in *FailStepRequest, opts ...grpc.CallOption) (*FailStepResponse, error)
	// Start compensation for a saga
	CompensateSaga(ctx context.Context, in *CompensateSagaRequest, opts ...grpc.CallOption) (*CompensateSagaResponse, error)
	// Get saga status
	GetSagaStatus(ctx context.Context, in *GetSagaStatusRequest, opts ...grpc.CallOption) (*GetSagaStatusResponse, error)
	// List sagas with filters
	ListSagas(ctx context.Context, in *ListSagasRequest, opts ...grpc.CallOption) (*ListSagasResponse, error)
	// Recover failed/stuck sagas
	RecoverSagas(ctx context.Context, in *RecoverSagasRequest, opts ...grpc.CallOption) (*RecoverSagasResponse, error)
}

type sagaOrchestrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSagaOrchestrationServiceClient(cc grpc.ClientConnInterface) SagaOrchestrationServiceClient {
	return &sagaOrchestrationServiceClient{cc}
}

func (c *sagaOrchestrationServiceClient) StartSaga(ctx context.Context, in *StartSagaRequest, opts ...grpc.CallOption) (*StartSagaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSagaResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_StartSaga_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) ExecuteStep(ctx context.Context, in *ExecuteStepRequest, opts ...grpc.CallOption) (*ExecuteStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteStepResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_ExecuteStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) CompleteStep(ctx context.Context, in *CompleteStepRequest, opts ...grpc.CallOption) (*CompleteStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteStepResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_CompleteStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) FailStep(ctx context.Context, in *FailStepRequest, opts ...grpc.CallOption) (*FailStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailStepResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_FailStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) CompensateSaga(ctx context.Context, in *CompensateSagaRequest, opts ...grpc.CallOption) (*CompensateSagaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompensateSagaResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_CompensateSaga_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) GetSagaStatus(ctx context.Context, in *GetSagaStatusRequest, opts ...grpc.CallOption) (*GetSagaStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSagaStatusResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_GetSagaStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) ListSagas(ctx context.Context, in *ListSagasRequest, opts ...grpc.CallOption) (*ListSagasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSagasResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_ListSagas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaOrchestrationServiceClient) RecoverSagas(ctx context.Context, in *RecoverSagasRequest, opts ...grpc.CallOption) (*RecoverSagasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecoverSagasResponse)
	err := c.cc.Invoke(ctx, SagaOrchestrationService_RecoverSagas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SagaOrchestrationServiceServer is the server API for SagaOrchestrationService service.
// All implementations must embed UnimplementedSagaOrchestrationServiceServer
// for forward compatibility.
//
// Saga orchestration service for managing distributed transactions
type SagaOrchestrationServiceServer interface {
	// Start a new saga
	StartSaga(context.Context, *StartSagaRequest) (*StartSagaResponse, error)
	// Execute next step in saga
	ExecuteStep(context.Context, *ExecuteStepRequest) (*ExecuteStepResponse, error)
	// Complete a step
	CompleteStep(context.Context, *CompleteStepRequest) (*CompleteStepResponse, error)
	// Mark a step as failed
	FailStep(context.Context, *FailStepRequest) (*FailStepResponse, error)
	// Start compensation for a saga
	CompensateSaga(context.Context, *CompensateSagaRequest) (*CompensateSagaResponse, error)
	// Get saga status
	GetSagaStatus(context.Context, *GetSagaStatusRequest) (*GetSagaStatusResponse, error)
	// List sagas with filters
	ListSagas(context.Context, *ListSagasRequest) (*ListSagasResponse, error)
	// Recover failed/stuck sagas
	RecoverSagas(context.Context, *RecoverSagasRequest) (*RecoverSagasResponse, error)
	mustEmbedUnimplementedSagaOrchestrationServiceServer()
}

// UnimplementedSagaOrchestrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSagaOrchestrationServiceServer struct{}

func (UnimplementedSagaOrchestrationServiceServer) StartSaga(context.Context, *StartSagaRequest) (*StartSagaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSaga not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) ExecuteStep(context.Context, *ExecuteStepRequest) (*ExecuteStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStep not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) CompleteStep(context.Context, *CompleteStepRequest) (*CompleteStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteStep not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) FailStep(context.Context, *FailStepRequest) (*FailStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailStep not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) CompensateSaga(context.Context, *CompensateSagaRequest) (*CompensateSagaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompensateSaga not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) GetSagaStatus(context.Context, *GetSagaStatusRequest) (*GetSagaStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSagaStatus not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) ListSagas(context.Context, *ListSagasRequest) (*ListSagasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSagas not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) RecoverSagas(context.Context, *RecoverSagasRequest) (*RecoverSagasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverSagas not implemented")
}
func (UnimplementedSagaOrchestrationServiceServer) mustEmbedUnimplementedSagaOrchestrationServiceServer() {
}
func (UnimplementedSagaOrchestrationServiceServer) testEmbeddedByValue() {}

// UnsafeSagaOrchestrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SagaOrchestrationServiceServer will
// result in compilation errors.
type UnsafeSagaOrchestrationServiceServer interface {
	mustEmbedUnimplementedSagaOrchestrationServiceServer()
}

func RegisterSagaOrchestrationServiceServer(s grpc.ServiceRegistrar, srv SagaOrchestrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSagaOrchestrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SagaOrchestrationService_ServiceDesc, srv)
}

func _SagaOrchestrationService_StartSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSagaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).StartSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_StartSaga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).StartSaga(ctx, req.(*StartSagaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_ExecuteStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).ExecuteStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_ExecuteStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).ExecuteStep(ctx, req.(*ExecuteStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_CompleteStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).CompleteStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_CompleteStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).CompleteStep(ctx, req.(*CompleteStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_FailStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).FailStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_FailStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).FailStep(ctx, req.(*FailStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_CompensateSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompensateSagaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).CompensateSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_CompensateSaga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).CompensateSaga(ctx, req.(*CompensateSagaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_GetSagaStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSagaStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).GetSagaStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_GetSagaStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).GetSagaStatus(ctx, req.(*GetSagaStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_ListSagas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSagasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).ListSagas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_ListSagas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).ListSagas(ctx, req.(*ListSagasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaOrchestrationService_RecoverSagas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverSagasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaOrchestrationServiceServer).RecoverSagas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaOrchestrationService_RecoverSagas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaOrchestrationServiceServer).RecoverSagas(ctx, req.(*RecoverSagasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SagaOrchestrationService_ServiceDesc is the grpc.ServiceDesc for SagaOrchestrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SagaOrchestrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saga.v1.SagaOrchestrationService",
	HandlerType: (*SagaOrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSaga",
			Handler:    _SagaOrchestrationService_StartSaga_Handler,
		},
		{
			MethodName: "ExecuteStep",
			Handler:    _SagaOrchestrationService_ExecuteStep_Handler,
		},
		{
			MethodName: "CompleteStep",
			Handler:    _SagaOrchestrationService_CompleteStep_Handler,
		},
		{
			MethodName: "FailStep",
			Handler:    _SagaOrchestrationService_FailStep_Handler,
		},
		{
			MethodName: "CompensateSaga",
			Handler:    _SagaOrchestrationService_CompensateSaga_Handler,
		},
		{
			MethodName: "GetSagaStatus",
			Handler:    _SagaOrchestrationService_GetSagaStatus_Handler,
		},
		{
			MethodName: "ListSagas",
			Handler:    _SagaOrchestrationService_ListSagas_Handler,
		},
		{
			MethodName: "RecoverSagas",
			Handler:    _SagaOrchestrationService_RecoverSagas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/saga/v1/saga.proto",
}

const (
	SagaStepService_ExecuteStep_FullMethodName    = "/saga.v1.SagaStepService/ExecuteStep"
	SagaStepService_CompensateStep_FullMethodName = "/saga.v1.SagaStepService/CompensateStep"
	SagaStepService_CanRetryStep_FullMethodName   = "/saga.v1.SagaStepService/CanRetryStep"
)

// SagaStepServiceClient is the client API for SagaStepService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Saga step execution service (implemented by each service)
type SagaStepServiceClient interface {
	// Execute a saga step
	ExecuteStep(ctx context.Context, in *SagaStepExecuteRequest, opts ...grpc.CallOption) (*SagaStepExecuteResponse, error)
	// Compensate a saga step
	CompensateStep(ctx context.Context, in *SagaStepCompensateRequest, opts ...grpc.CallOption) (*SagaStepCompensateResponse, error)
	// Check if step can be retried
	CanRetryStep(ctx context.Context, in *CanRetryStepRequest, opts ...grpc.CallOption) (*CanRetryStepResponse, error)
}

type sagaStepServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSagaStepServiceClient(cc grpc.ClientConnInterface) SagaStepServiceClient {
	return &sagaStepServiceClient{cc}
}

func (c *sagaStepServiceClient) ExecuteStep(ctx context.Context, in *SagaStepExecuteRequest, opts ...grpc.CallOption) (*SagaStepExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SagaStepExecuteResponse)
	err := c.cc.Invoke(ctx, SagaStepService_ExecuteStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaStepServiceClient) CompensateStep(ctx context.Context, in *SagaStepCompensateRequest, opts ...grpc.CallOption) (*SagaStepCompensateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SagaStepCompensateResponse)
	err := c.cc.Invoke(ctx, SagaStepService_CompensateStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaStepServiceClient) CanRetryStep(ctx context.Context, in *CanRetryStepRequest, opts ...grpc.CallOption) (*CanRetryStepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanRetryStepResponse)
	err := c.cc.Invoke(ctx, SagaStepService_CanRetryStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SagaStepServiceServer is the server API for SagaStepService service.
// All implementations must embed UnimplementedSagaStepServiceServer
// for forward compatibility.
//
// Saga step execution service (implemented by each service)
type SagaStepServiceServer interface {
	// Execute a saga step
	ExecuteStep(context.Context, *SagaStepExecuteRequest) (*SagaStepExecuteResponse, error)
	// Compensate a saga step
	CompensateStep(context.Context, *SagaStepCompensateRequest) (*SagaStepCompensateResponse, error)
	// Check if step can be retried
	CanRetryStep(context.Context, *CanRetryStepRequest) (*CanRetryStepResponse, error)
	mustEmbedUnimplementedSagaStepServiceServer()
}

// UnimplementedSagaStepServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSagaStepServiceServer struct{}

func (UnimplementedSagaStepServiceServer) ExecuteStep(context.Context, *SagaStepExecuteRequest) (*SagaStepExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteStep not implemented")
}
func (UnimplementedSagaStepServiceServer) CompensateStep(context.Context, *SagaStepCompensateRequest) (*SagaStepCompensateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompensateStep not implemented")
}
func (UnimplementedSagaStepServiceServer) CanRetryStep(context.Context, *CanRetryStepRequest) (*CanRetryStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanRetryStep not implemented")
}
func (UnimplementedSagaStepServiceServer) mustEmbedUnimplementedSagaStepServiceServer() {}
func (UnimplementedSagaStepServiceServer) testEmbeddedByValue()                         {}

// UnsafeSagaStepServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SagaStepServiceServer will
// result in compilation errors.
type UnsafeSagaStepServiceServer interface {
	mustEmbedUnimplementedSagaStepServiceServer()
}

func RegisterSagaStepServiceServer(s grpc.ServiceRegistrar, srv SagaStepServiceServer) {
	// If the following call pancis, it indicates UnimplementedSagaStepServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SagaStepService_ServiceDesc, srv)
}

func _SagaStepService_ExecuteStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SagaStepExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaStepServiceServer).ExecuteStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaStepService_ExecuteStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaStepServiceServer).ExecuteStep(ctx, req.(*SagaStepExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaStepService_CompensateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SagaStepCompensateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaStepServiceServer).CompensateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaStepService_CompensateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaStepServiceServer).CompensateStep(ctx, req.(*SagaStepCompensateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaStepService_CanRetryStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanRetryStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaStepServiceServer).CanRetryStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaStepService_CanRetryStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaStepServiceServer).CanRetryStep(ctx, req.(*CanRetryStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SagaStepService_ServiceDesc is the grpc.ServiceDesc for SagaStepService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SagaStepService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saga.v1.SagaStepService",
	HandlerType: (*SagaStepServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteStep",
			Handler:    _SagaStepService_ExecuteStep_Handler,
		},
		{
			MethodName: "CompensateStep",
			Handler:    _SagaStepService_CompensateStep_Handler,
		},
		{
			MethodName: "CanRetryStep",
			Handler:    _SagaStepService_CanRetryStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/saga/v1/saga.proto",
}
