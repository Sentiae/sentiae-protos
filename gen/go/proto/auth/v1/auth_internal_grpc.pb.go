// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/auth/v1/auth_internal.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthInternalService_ValidateToken_FullMethodName                   = "/auth.v1.AuthInternalService/ValidateToken"
	AuthInternalService_GetUser_FullMethodName                         = "/auth.v1.AuthInternalService/GetUser"
	AuthInternalService_GetUsersBatch_FullMethodName                   = "/auth.v1.AuthInternalService/GetUsersBatch"
	AuthInternalService_CheckPermission_FullMethodName                 = "/auth.v1.AuthInternalService/CheckPermission"
	AuthInternalService_CheckOrganizationPermission_FullMethodName     = "/auth.v1.AuthInternalService/CheckOrganizationPermission"
	AuthInternalService_GetUserPermissions_FullMethodName              = "/auth.v1.AuthInternalService/GetUserPermissions"
	AuthInternalService_GetOrganization_FullMethodName                 = "/auth.v1.AuthInternalService/GetOrganization"
	AuthInternalService_ListUserOrganizations_FullMethodName           = "/auth.v1.AuthInternalService/ListUserOrganizations"
	AuthInternalService_GetOrganizationMembers_FullMethodName          = "/auth.v1.AuthInternalService/GetOrganizationMembers"
	AuthInternalService_GetTeamMembers_FullMethodName                  = "/auth.v1.AuthInternalService/GetTeamMembers"
	AuthInternalService_GetTeamHierarchy_FullMethodName                = "/auth.v1.AuthInternalService/GetTeamHierarchy"
	AuthInternalService_GetTeam_FullMethodName                         = "/auth.v1.AuthInternalService/GetTeam"
	AuthInternalService_ListOrganizationTeams_FullMethodName           = "/auth.v1.AuthInternalService/ListOrganizationTeams"
	AuthInternalService_ValidateOrganizationAccess_FullMethodName      = "/auth.v1.AuthInternalService/ValidateOrganizationAccess"
	AuthInternalService_ValidateTeamAccess_FullMethodName              = "/auth.v1.AuthInternalService/ValidateTeamAccess"
	AuthInternalService_GetUserAccessContext_FullMethodName            = "/auth.v1.AuthInternalService/GetUserAccessContext"
	AuthInternalService_ListConnectedOrganizations_FullMethodName      = "/auth.v1.AuthInternalService/ListConnectedOrganizations"
	AuthInternalService_ListUserCrossOrganizationAccess_FullMethodName = "/auth.v1.AuthInternalService/ListUserCrossOrganizationAccess"
	AuthInternalService_SearchUsers_FullMethodName                     = "/auth.v1.AuthInternalService/SearchUsers"
	AuthInternalService_GetUsersByOrganization_FullMethodName          = "/auth.v1.AuthInternalService/GetUsersByOrganization"
	AuthInternalService_EnrichUserSession_FullMethodName               = "/auth.v1.AuthInternalService/EnrichUserSession"
	AuthInternalService_GetOrganizationByTeam_FullMethodName           = "/auth.v1.AuthInternalService/GetOrganizationByTeam"
)

// AuthInternalServiceClient is the client API for AuthInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AuthInternalService provides secure, internal-only methods for other
// microservices to interact with the authentication system.
type AuthInternalServiceClient interface {
	// Enhanced token validation with full organizational context
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	// Enhanced user details with complete profile and organizational context
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Batch user retrieval with enhanced profiles
	GetUsersBatch(ctx context.Context, in *GetUsersBatchRequest, opts ...grpc.CallOption) (*GetUsersBatchResponse, error)
	// Permission checking methods
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckOrganizationPermission(ctx context.Context, in *CheckOrganizationPermissionRequest, opts ...grpc.CallOption) (*CheckOrganizationPermissionResponse, error)
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	// Organization management
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	ListUserOrganizations(ctx context.Context, in *ListUserOrganizationsRequest, opts ...grpc.CallOption) (*ListUserOrganizationsResponse, error)
	GetOrganizationMembers(ctx context.Context, in *GetOrganizationMembersRequest, opts ...grpc.CallOption) (*GetOrganizationMembersResponse, error)
	// Team management
	GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error)
	GetTeamHierarchy(ctx context.Context, in *GetTeamHierarchyRequest, opts ...grpc.CallOption) (*GetTeamHierarchyResponse, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error)
	// Access validation methods
	ValidateOrganizationAccess(ctx context.Context, in *ValidateOrganizationAccessRequest, opts ...grpc.CallOption) (*ValidateOrganizationAccessResponse, error)
	ValidateTeamAccess(ctx context.Context, in *ValidateTeamAccessRequest, opts ...grpc.CallOption) (*ValidateTeamAccessResponse, error)
	GetUserAccessContext(ctx context.Context, in *GetUserAccessContextRequest, opts ...grpc.CallOption) (*GetUserAccessContextResponse, error)
	// Cross-organization features
	ListConnectedOrganizations(ctx context.Context, in *ListConnectedOrganizationsRequest, opts ...grpc.CallOption) (*ListConnectedOrganizationsResponse, error)
	ListUserCrossOrganizationAccess(ctx context.Context, in *ListUserCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*ListUserCrossOrganizationAccessResponse, error)
	// User search and filtering
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	GetUsersByOrganization(ctx context.Context, in *GetUsersByOrganizationRequest, opts ...grpc.CallOption) (*GetUsersByOrganizationResponse, error)
	// Session enrichment
	EnrichUserSession(ctx context.Context, in *EnrichUserSessionRequest, opts ...grpc.CallOption) (*EnrichUserSessionResponse, error)
	// Utility methods
	GetOrganizationByTeam(ctx context.Context, in *GetOrganizationByTeamRequest, opts ...grpc.CallOption) (*GetOrganizationByTeamResponse, error)
}

type authInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthInternalServiceClient(cc grpc.ClientConnInterface) AuthInternalServiceClient {
	return &authInternalServiceClient{cc}
}

func (c *authInternalServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetUsersBatch(ctx context.Context, in *GetUsersBatchRequest, opts ...grpc.CallOption) (*GetUsersBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersBatchResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetUsersBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) CheckOrganizationPermission(ctx context.Context, in *CheckOrganizationPermissionRequest, opts ...grpc.CallOption) (*CheckOrganizationPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOrganizationPermissionResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_CheckOrganizationPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) ListUserOrganizations(ctx context.Context, in *ListUserOrganizationsRequest, opts ...grpc.CallOption) (*ListUserOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserOrganizationsResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ListUserOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetOrganizationMembers(ctx context.Context, in *GetOrganizationMembersRequest, opts ...grpc.CallOption) (*GetOrganizationMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamMembersResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetTeamHierarchy(ctx context.Context, in *GetTeamHierarchyRequest, opts ...grpc.CallOption) (*GetTeamHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamHierarchyResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetTeamHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) ListOrganizationTeams(ctx context.Context, in *ListOrganizationTeamsRequest, opts ...grpc.CallOption) (*ListOrganizationTeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationTeamsResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ListOrganizationTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) ValidateOrganizationAccess(ctx context.Context, in *ValidateOrganizationAccessRequest, opts ...grpc.CallOption) (*ValidateOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ValidateOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) ValidateTeamAccess(ctx context.Context, in *ValidateTeamAccessRequest, opts ...grpc.CallOption) (*ValidateTeamAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTeamAccessResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ValidateTeamAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetUserAccessContext(ctx context.Context, in *GetUserAccessContextRequest, opts ...grpc.CallOption) (*GetUserAccessContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAccessContextResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetUserAccessContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) ListConnectedOrganizations(ctx context.Context, in *ListConnectedOrganizationsRequest, opts ...grpc.CallOption) (*ListConnectedOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConnectedOrganizationsResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ListConnectedOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) ListUserCrossOrganizationAccess(ctx context.Context, in *ListUserCrossOrganizationAccessRequest, opts ...grpc.CallOption) (*ListUserCrossOrganizationAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCrossOrganizationAccessResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_ListUserCrossOrganizationAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetUsersByOrganization(ctx context.Context, in *GetUsersByOrganizationRequest, opts ...grpc.CallOption) (*GetUsersByOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersByOrganizationResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetUsersByOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) EnrichUserSession(ctx context.Context, in *EnrichUserSessionRequest, opts ...grpc.CallOption) (*EnrichUserSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrichUserSessionResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_EnrichUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authInternalServiceClient) GetOrganizationByTeam(ctx context.Context, in *GetOrganizationByTeamRequest, opts ...grpc.CallOption) (*GetOrganizationByTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationByTeamResponse)
	err := c.cc.Invoke(ctx, AuthInternalService_GetOrganizationByTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthInternalServiceServer is the server API for AuthInternalService service.
// All implementations must embed UnimplementedAuthInternalServiceServer
// for forward compatibility.
//
// AuthInternalService provides secure, internal-only methods for other
// microservices to interact with the authentication system.
type AuthInternalServiceServer interface {
	// Enhanced token validation with full organizational context
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	// Enhanced user details with complete profile and organizational context
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Batch user retrieval with enhanced profiles
	GetUsersBatch(context.Context, *GetUsersBatchRequest) (*GetUsersBatchResponse, error)
	// Permission checking methods
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	CheckOrganizationPermission(context.Context, *CheckOrganizationPermissionRequest) (*CheckOrganizationPermissionResponse, error)
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	// Organization management
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	ListUserOrganizations(context.Context, *ListUserOrganizationsRequest) (*ListUserOrganizationsResponse, error)
	GetOrganizationMembers(context.Context, *GetOrganizationMembersRequest) (*GetOrganizationMembersResponse, error)
	// Team management
	GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error)
	GetTeamHierarchy(context.Context, *GetTeamHierarchyRequest) (*GetTeamHierarchyResponse, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error)
	// Access validation methods
	ValidateOrganizationAccess(context.Context, *ValidateOrganizationAccessRequest) (*ValidateOrganizationAccessResponse, error)
	ValidateTeamAccess(context.Context, *ValidateTeamAccessRequest) (*ValidateTeamAccessResponse, error)
	GetUserAccessContext(context.Context, *GetUserAccessContextRequest) (*GetUserAccessContextResponse, error)
	// Cross-organization features
	ListConnectedOrganizations(context.Context, *ListConnectedOrganizationsRequest) (*ListConnectedOrganizationsResponse, error)
	ListUserCrossOrganizationAccess(context.Context, *ListUserCrossOrganizationAccessRequest) (*ListUserCrossOrganizationAccessResponse, error)
	// User search and filtering
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	GetUsersByOrganization(context.Context, *GetUsersByOrganizationRequest) (*GetUsersByOrganizationResponse, error)
	// Session enrichment
	EnrichUserSession(context.Context, *EnrichUserSessionRequest) (*EnrichUserSessionResponse, error)
	// Utility methods
	GetOrganizationByTeam(context.Context, *GetOrganizationByTeamRequest) (*GetOrganizationByTeamResponse, error)
	mustEmbedUnimplementedAuthInternalServiceServer()
}

// UnimplementedAuthInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthInternalServiceServer struct{}

func (UnimplementedAuthInternalServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetUsersBatch(context.Context, *GetUsersBatchRequest) (*GetUsersBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersBatch not implemented")
}
func (UnimplementedAuthInternalServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedAuthInternalServiceServer) CheckOrganizationPermission(context.Context, *CheckOrganizationPermissionRequest) (*CheckOrganizationPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrganizationPermission not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedAuthInternalServiceServer) ListUserOrganizations(context.Context, *ListUserOrganizationsRequest) (*ListUserOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOrganizations not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetOrganizationMembers(context.Context, *GetOrganizationMembersRequest) (*GetOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembers not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembers not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetTeamHierarchy(context.Context, *GetTeamHierarchyRequest) (*GetTeamHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamHierarchy not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedAuthInternalServiceServer) ListOrganizationTeams(context.Context, *ListOrganizationTeamsRequest) (*ListOrganizationTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationTeams not implemented")
}
func (UnimplementedAuthInternalServiceServer) ValidateOrganizationAccess(context.Context, *ValidateOrganizationAccessRequest) (*ValidateOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrganizationAccess not implemented")
}
func (UnimplementedAuthInternalServiceServer) ValidateTeamAccess(context.Context, *ValidateTeamAccessRequest) (*ValidateTeamAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTeamAccess not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetUserAccessContext(context.Context, *GetUserAccessContextRequest) (*GetUserAccessContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccessContext not implemented")
}
func (UnimplementedAuthInternalServiceServer) ListConnectedOrganizations(context.Context, *ListConnectedOrganizationsRequest) (*ListConnectedOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectedOrganizations not implemented")
}
func (UnimplementedAuthInternalServiceServer) ListUserCrossOrganizationAccess(context.Context, *ListUserCrossOrganizationAccessRequest) (*ListUserCrossOrganizationAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCrossOrganizationAccess not implemented")
}
func (UnimplementedAuthInternalServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetUsersByOrganization(context.Context, *GetUsersByOrganizationRequest) (*GetUsersByOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByOrganization not implemented")
}
func (UnimplementedAuthInternalServiceServer) EnrichUserSession(context.Context, *EnrichUserSessionRequest) (*EnrichUserSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrichUserSession not implemented")
}
func (UnimplementedAuthInternalServiceServer) GetOrganizationByTeam(context.Context, *GetOrganizationByTeamRequest) (*GetOrganizationByTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationByTeam not implemented")
}
func (UnimplementedAuthInternalServiceServer) mustEmbedUnimplementedAuthInternalServiceServer() {}
func (UnimplementedAuthInternalServiceServer) testEmbeddedByValue()                             {}

// UnsafeAuthInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthInternalServiceServer will
// result in compilation errors.
type UnsafeAuthInternalServiceServer interface {
	mustEmbedUnimplementedAuthInternalServiceServer()
}

func RegisterAuthInternalServiceServer(s grpc.ServiceRegistrar, srv AuthInternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthInternalService_ServiceDesc, srv)
}

func _AuthInternalService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetUsersBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetUsersBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetUsersBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetUsersBatch(ctx, req.(*GetUsersBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_CheckOrganizationPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOrganizationPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).CheckOrganizationPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_CheckOrganizationPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).CheckOrganizationPermission(ctx, req.(*CheckOrganizationPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_ListUserOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ListUserOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ListUserOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ListUserOrganizations(ctx, req.(*ListUserOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetOrganizationMembers(ctx, req.(*GetOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetTeamMembers(ctx, req.(*GetTeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetTeamHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetTeamHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetTeamHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetTeamHierarchy(ctx, req.(*GetTeamHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_ListOrganizationTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ListOrganizationTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ListOrganizationTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ListOrganizationTeams(ctx, req.(*ListOrganizationTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_ValidateOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ValidateOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ValidateOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ValidateOrganizationAccess(ctx, req.(*ValidateOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_ValidateTeamAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTeamAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ValidateTeamAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ValidateTeamAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ValidateTeamAccess(ctx, req.(*ValidateTeamAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetUserAccessContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccessContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetUserAccessContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetUserAccessContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetUserAccessContext(ctx, req.(*GetUserAccessContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_ListConnectedOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectedOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ListConnectedOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ListConnectedOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ListConnectedOrganizations(ctx, req.(*ListConnectedOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_ListUserCrossOrganizationAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCrossOrganizationAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).ListUserCrossOrganizationAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_ListUserCrossOrganizationAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).ListUserCrossOrganizationAccess(ctx, req.(*ListUserCrossOrganizationAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetUsersByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetUsersByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetUsersByOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetUsersByOrganization(ctx, req.(*GetUsersByOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_EnrichUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrichUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).EnrichUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_EnrichUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).EnrichUserSession(ctx, req.(*EnrichUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthInternalService_GetOrganizationByTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationByTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServiceServer).GetOrganizationByTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthInternalService_GetOrganizationByTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServiceServer).GetOrganizationByTeam(ctx, req.(*GetOrganizationByTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthInternalService_ServiceDesc is the grpc.ServiceDesc for AuthInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthInternalService",
	HandlerType: (*AuthInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _AuthInternalService_ValidateToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthInternalService_GetUser_Handler,
		},
		{
			MethodName: "GetUsersBatch",
			Handler:    _AuthInternalService_GetUsersBatch_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _AuthInternalService_CheckPermission_Handler,
		},
		{
			MethodName: "CheckOrganizationPermission",
			Handler:    _AuthInternalService_CheckOrganizationPermission_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _AuthInternalService_GetUserPermissions_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _AuthInternalService_GetOrganization_Handler,
		},
		{
			MethodName: "ListUserOrganizations",
			Handler:    _AuthInternalService_ListUserOrganizations_Handler,
		},
		{
			MethodName: "GetOrganizationMembers",
			Handler:    _AuthInternalService_GetOrganizationMembers_Handler,
		},
		{
			MethodName: "GetTeamMembers",
			Handler:    _AuthInternalService_GetTeamMembers_Handler,
		},
		{
			MethodName: "GetTeamHierarchy",
			Handler:    _AuthInternalService_GetTeamHierarchy_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _AuthInternalService_GetTeam_Handler,
		},
		{
			MethodName: "ListOrganizationTeams",
			Handler:    _AuthInternalService_ListOrganizationTeams_Handler,
		},
		{
			MethodName: "ValidateOrganizationAccess",
			Handler:    _AuthInternalService_ValidateOrganizationAccess_Handler,
		},
		{
			MethodName: "ValidateTeamAccess",
			Handler:    _AuthInternalService_ValidateTeamAccess_Handler,
		},
		{
			MethodName: "GetUserAccessContext",
			Handler:    _AuthInternalService_GetUserAccessContext_Handler,
		},
		{
			MethodName: "ListConnectedOrganizations",
			Handler:    _AuthInternalService_ListConnectedOrganizations_Handler,
		},
		{
			MethodName: "ListUserCrossOrganizationAccess",
			Handler:    _AuthInternalService_ListUserCrossOrganizationAccess_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _AuthInternalService_SearchUsers_Handler,
		},
		{
			MethodName: "GetUsersByOrganization",
			Handler:    _AuthInternalService_GetUsersByOrganization_Handler,
		},
		{
			MethodName: "EnrichUserSession",
			Handler:    _AuthInternalService_EnrichUserSession_Handler,
		},
		{
			MethodName: "GetOrganizationByTeam",
			Handler:    _AuthInternalService_GetOrganizationByTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/v1/auth_internal.proto",
}
