syntax = "proto3";

package identity.v1;

option go_package = "github.com/Sentiae/sentiae-protos/gen/go/identity/v1";

// IdentityService provides comprehensive identity and access management.
//
// This service handles:
// - User profile management and creation
// - Organization and team hierarchy management
// - Role-based access control (RBAC)
// - Cross-organization collaboration
// - Invitation and membership management
// - Enterprise user bindings
//
// Security:
// This service is internal-only and should not be exposed to external clients.
// All operations require proper service-to-service authentication.
//
// Data Model:
// Organizations contain Teams, which contain Users.
// Users can belong to multiple Organizations via memberships.
// Cross-organization access enables temporary collaboration.
//
// Example usage:
//   client := identity.NewIdentityServiceClient(conn)
//   org, err := client.CreateOrganization(ctx, &CreateOrganizationRequest{
//     Name: "Acme Corp",
//     Slug: "acme-corp",
//     CreatedByUserId: userID,
//   })
service IdentityService {
  // === User Management ===
  
  // GetOrCreateUser retrieves an existing user or creates a new one.
  //
  // This method is primarily used by the auth-service during:
  // - User registration flows
  // - Just-in-time (JIT) user provisioning
  // - SSO authentication with new users
  //
  // If the user doesn't exist, a new user profile is created with a default
  // organization and team assignment.
  //
  // Returns the user ID and their default organizational context.
  rpc GetOrCreateUser(GetOrCreateUserRequest) returns (GetOrCreateUserResponse);
  
  // GetUser retrieves complete user profile information.
  //
  // The response includes the user's basic profile plus their organizational
  // context (organizations and teams they belong to).
  //
  // Use cases:
  //   - User profile pages
  //   - Administrative user management
  //   - Access control decisions
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // UpdateUser modifies user profile information.
  //
  // Only basic profile fields can be updated via this method:
  //   - Full name
  //   - Avatar URL
  //
  // Email changes require separate verification flows.
  // Organizational memberships are managed via separate RPCs.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  
  // === Permission Management ===
  
  // CheckPermission verifies if a user has a specific permission within a team.
  //
  // Team permissions are typically more granular and relate to specific
  // team resources like projects, deployments, or team management.
  //
  // Permission format: "resource:action" (e.g., "projects:deploy", "members:invite")
  //
  // The check considers:
  //   - User's role within the team
  //   - Organization-level permissions that may override team permissions
  //   - Inherited permissions from parent teams (if hierarchical)
  rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse);
  
  // CheckOrganizationPermission verifies organization-level permissions.
  //
  // Organization permissions typically relate to:
  //   - Billing and subscription management
  //   - Organization-wide settings
  //   - Member and team management
  //   - Security and compliance settings
  //
  // Organization permissions generally supersede team-level permissions.
  rpc CheckOrganizationPermission(CheckOrganizationPermissionRequest) returns (CheckOrganizationPermissionResponse);
  
  // GetUserPermissions retrieves all effective permissions for a user.
  //
  // This method provides a comprehensive view of what a user can do within
  // a specific organizational and/or team context.
  //
  // The response includes:
  //   - Direct organization permissions
  //   - Direct team permissions  
  //   - Effective permissions (computed union with conflict resolution)
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse);
  
  // === Organization Management ===
  
  // CreateOrganization creates a new organization.
  //
  // The creator automatically becomes the organization owner and is assigned
  // to a default team within the organization.
  //
  // Organization creation includes:
  //   - Creating the organization record
  //   - Setting up default roles and permissions
  //   - Creating an initial team
  //   - Assigning the creator as owner
  //
  // The slug must be unique across the platform and URL-safe.
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);
  
  // GetOrganization retrieves detailed organization information.
  //
  // The response includes basic organization data plus aggregate statistics
  // like member count and team count for administrative purposes.
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse);
  
  // UpdateOrganization modifies organization settings.
  //
  // Updatable fields include:
  //   - Display name
  //   - Description
  //   - Logo URL
  //   - Website URL
  //
  // The slug cannot be changed after creation to maintain URL stability.
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);
  
  // DeleteOrganization permanently removes an organization.
  //
  // This is a destructive operation that:
  //   - Removes all teams within the organization
  //   - Revokes all memberships
  //   - Cancels all pending invitations
  //   - Removes organization connections
  //
  // Prerequisites:
  //   - Caller must be organization owner
  //   - Organization must not have active external integrations
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse);
  
  // ListUserOrganizations returns all organizations a user can access.
  //
  // The response includes:
  //   - Organizations where user is a direct member
  //   - Connected organizations accessible via organization relationships
  //
  // Results are ordered by the user's access level (owner > admin > member).
  rpc ListUserOrganizations(ListUserOrganizationsRequest) returns (ListUserOrganizationsResponse);
  
  // GetOrganizationMembers retrieves all members of an organization.
  //
  // The response includes each member's:
  //   - Basic profile information
  //   - Organization role
  //   - Join date
  //
  // Results are ordered by join date (newest first).
  rpc GetOrganizationMembers(GetOrganizationMembersRequest) returns (GetOrganizationMembersResponse);
  
  // === Team Management ===
  
  // GetTeamMembers retrieves all members of a specific team.
  //
  // The response includes each member's:
  //   - Basic profile information (name, avatar)
  //   - Role within the team
  //   - Team join date
  //
  // Members are ordered by their role hierarchy (lead > member > observer).
  rpc GetTeamMembers(GetTeamMembersRequest) returns (GetTeamMembersResponse);
  
  // CreateTeam creates a new team within an organization.
  //
  // Teams can be:
  //   - Root-level teams (no parent)
  //   - Child teams under existing teams (hierarchical)
  //
  // Team creation automatically:
  //   - Assigns the creator as team lead
  //   - Sets up default team roles
  //   - Calculates hierarchy depth and path
  //
  // Team names must be unique within their parent scope.
  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse);
  
  // GetTeam retrieves detailed information about a team.
  //
  // The response includes:
  //   - Team basic information
  //   - Parent organization details
  //   - Parent team (if hierarchical)
  //   - Direct child teams
  //
  // This provides complete context for understanding team relationships.
  rpc GetTeam(GetTeamRequest) returns (GetTeamResponse);
  
  // UpdateTeam modifies team settings.
  //
  // Updatable fields:
  //   - Team name (must remain unique in scope)
  //   - Parent team (for reorganization)
  //
  // Changing parent team triggers hierarchy recalculation for all descendants.
  rpc UpdateTeam(UpdateTeamRequest) returns (UpdateTeamResponse);
  
  // DeleteTeam permanently removes a team.
  //
  // Prerequisites:
  //   - Team must not have child teams
  //   - All team members must be removed first
  //   - Caller must have team admin permissions
  //
  // This operation:
  //   - Removes the team record
  //   - Cancels pending team invitations
  //   - Archives team-specific audit logs
  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse);
  
  // ListOrganizationTeams returns teams within an organization.
  //
  // Filtering options:
  //   - All teams (if no parent_team_id specified)
  //   - Teams under a specific parent (if parent_team_id provided)
  //
  // Results are ordered by creation date (oldest first) to reflect
  // organizational growth patterns.
  rpc ListOrganizationTeams(ListOrganizationTeamsRequest) returns (ListOrganizationTeamsResponse);
  
  // GetTeamHierarchy returns the complete team structure for an organization.
  //
  // The response is a tree structure showing:
  //   - Root teams at the top level
  //   - Nested child teams under their parents
  //   - Full hierarchy depth and relationships
  //
  // This is useful for:
  //   - Organizational charts
  //   - Permission inheritance calculations
  //   - Team navigation interfaces
  rpc GetTeamHierarchy(GetTeamHierarchyRequest) returns (GetTeamHierarchyResponse);
  
  // === Role Management ===
  
  // CreateOrganizationRole creates a custom role within an organization.
  //
  // Custom roles allow organizations to define specific permission sets
  // beyond the default system roles (Owner, Admin, Member).
  //
  // Role creation includes:
  //   - Validating permission strings against known permissions
  //   - Ensuring role names are unique within the organization
  //   - Setting up audit logging for role usage
  //
  // Permission format: "resource:action" (e.g., "billing:view", "teams:create")
  rpc CreateOrganizationRole(CreateOrganizationRoleRequest) returns (CreateOrganizationRoleResponse);
  
  // ListOrganizationRoles returns all roles available in an organization.
  //
  // The response includes:
  //   - System-defined roles (Owner, Admin, Member)
  //   - Custom organization-specific roles
  //
  // Roles are ordered by their privilege level (most privileged first).
  rpc ListOrganizationRoles(ListOrganizationRolesRequest) returns (ListOrganizationRolesResponse);
  
  // UpdateOrganizationRole modifies an existing organization role.
  //
  // Updatable fields:
  //   - Role name (must remain unique)
  //   - Permission list
  //
  // Limitations:
  //   - System roles (Owner, Admin, Member) cannot be modified
  //   - Permission changes affect all users with this role immediately
  //   - Cannot remove permissions if it would leave users without critical access
  rpc UpdateOrganizationRole(UpdateOrganizationRoleRequest) returns (UpdateOrganizationRoleResponse);
  
  // DeleteOrganizationRole removes a custom organization role.
  //
  // Prerequisites:
  //   - Role must not be a system role
  //   - No users can be assigned this role
  //   - No pending invitations can reference this role
  //
  // Users previously assigned to this role are automatically reassigned
  // to the default "Member" role.
  rpc DeleteOrganizationRole(DeleteOrganizationRoleRequest) returns (DeleteOrganizationRoleResponse);
  
  // === Membership Management ===
  
  // AddOrganizationMember adds a user to an organization.
  //
  // This operation:
  //   - Creates an organization membership record
  //   - Assigns the specified role to the user
  //   - Adds the user to the organization's default team (if applicable)
  //   - Sends welcome notifications
  //
  // Prerequisites:
  //   - User must exist in the system
  //   - Caller must have member management permissions
  //   - User must not already be a member
  rpc AddOrganizationMember(AddOrganizationMemberRequest) returns (AddOrganizationMemberResponse);
  
  // RemoveOrganizationMember removes a user from an organization.
  //
  // This operation:
  //   - Removes the user from all teams within the organization
  //   - Revokes all organization-specific permissions
  //   - Cancels any pending invitations
  //   - Archives the user's organization activity
  //
  // Special cases:
  //   - Organization owners cannot be removed (must transfer ownership first)
  //   - Last admin cannot be removed (must assign another admin first)
  rpc RemoveOrganizationMember(RemoveOrganizationMemberRequest) returns (RemoveOrganizationMemberResponse);
  
  // UpdateOrganizationMemberRole changes a user's role within an organization.
  //
  // Role changes:
  //   - Take effect immediately
  //   - May require additional security confirmations for privilege escalation
  //   - Are logged for audit purposes
  //
  // Restrictions:
  //   - Cannot demote the last organization owner
  //   - Self-role changes may be restricted by organization policy
  rpc UpdateOrganizationMemberRole(UpdateOrganizationMemberRoleRequest) returns (UpdateOrganizationMemberRoleResponse);
  
  // AddTeamMember adds a user to a team.
  //
  // Prerequisites:
  //   - User must be a member of the team's organization
  //   - Caller must have team management permissions
  //   - Team must not have reached member limits (if configured)
  //
  // The user is assigned the specified role within the team context.
  rpc AddTeamMember(AddTeamMemberRequest) returns (AddTeamMemberResponse);
  
  // RemoveTeamMember removes a user from a team.
  //
  // This operation:
  //   - Removes team-specific permissions
  //   - May trigger resource access reviews
  //   - Preserves the user's organization membership
  //
  // Special cases:
  //   - Team leads may require replacement before removal
  //   - Users may be automatically removed from child teams
  rpc RemoveTeamMember(RemoveTeamMemberRequest) returns (RemoveTeamMemberResponse);
  
  // UpdateTeamMemberRole changes a user's role within a team.
  //
  // Team role changes are generally less restricted than organization roles
  // but still require appropriate permissions from the caller.
  //
  // The change affects only the user's permissions within this specific team.
  rpc UpdateTeamMemberRole(UpdateTeamMemberRoleRequest) returns (UpdateTeamMemberRoleResponse);
  
  // === Organization Connections ===
  
  // CreateOrganizationConnection establishes a relationship between organizations.
  //
  // Connection types include:
  //   - "partner": Business partnership for collaboration
  //   - "subsidiary": Parent-child corporate relationship
  //   - "vendor": Service provider relationship
  //   - "customer": Client relationship
  //
  // Connections enable:
  //   - Cross-organization visibility (with permission)
  //   - Simplified user access grants
  //   - Shared resource collaboration
  //   - Unified billing (for certain connection types)
  //
  // Both organizations must approve the connection before it becomes active.
  rpc CreateOrganizationConnection(CreateOrganizationConnectionRequest) returns (CreateOrganizationConnectionResponse);
  
  // ListConnectedOrganizations returns all organizations connected to a given org.
  //
  // The response includes:
  //   - Connection type and status
  //   - Direction of the connection (is_source indicates if this org initiated it)
  //   - Creation date for audit purposes
  //
  // Results are grouped by connection type and ordered by creation date.
  rpc ListConnectedOrganizations(ListConnectedOrganizationsRequest) returns (ListConnectedOrganizationsResponse);
  
  // UpdateOrganizationConnection modifies an existing connection.
  //
  // Updatable fields:
  //   - Connection type (with mutual agreement)
  //   - Status (active, inactive, pending)
  //
  // Status changes:
  //   - "pending" → "active": Requires approval from both organizations
  //   - "active" → "inactive": Can be done unilaterally, revokes access
  //   - "inactive" → "active": Requires re-approval process
  rpc UpdateOrganizationConnection(UpdateOrganizationConnectionRequest) returns (UpdateOrganizationConnectionResponse);
  
  // DeleteOrganizationConnection permanently removes a connection.
  //
  // This operation:
  //   - Removes the connection record
  //   - Revokes all cross-organization access grants
  //   - Notifies both organizations
  //   - Archives connection history for audit
  //
  // Either organization can delete a connection unilaterally.
  rpc DeleteOrganizationConnection(DeleteOrganizationConnectionRequest) returns (DeleteOrganizationConnectionResponse);
  
  // === Cross-Organization Access ===
  
  // GrantCrossOrganizationAccess provides temporary access to another organization.
  //
  // This enables users from one organization to collaborate with another
  // without permanent membership transfer.
  //
  // Access levels:
  //   - "guest": Read-only access to specified resources
  //   - "member": Standard collaboration permissions
  //   - "admin": Elevated permissions for project management
  //
  // Prerequisites:
  //   - Organizations must be connected or have an active partnership
  //   - Granting user must have admin permissions in target organization
  //   - Target organization policies must allow cross-org access
  //
  // Access can be time-limited with automatic expiration.
  rpc GrantCrossOrganizationAccess(GrantCrossOrganizationAccessRequest) returns (GrantCrossOrganizationAccessResponse);
  
  // RevokeCrossOrganizationAccess removes cross-organization access.
  //
  // Revocation:
  //   - Takes effect immediately
  //   - Removes access to all resources in the target organization
  //   - Logs the revocation for audit purposes
  //   - Notifies the affected user
  //
  // Either the granting organization or the user's home organization
  // can revoke access.
  rpc RevokeCrossOrganizationAccess(RevokeCrossOrganizationAccessRequest) returns (RevokeCrossOrganizationAccessResponse);
  
  // ListUserCrossOrganizationAccess returns all cross-org access for a user.
  //
  // The response includes:
  //   - Target organizations and access levels
  //   - Expiration dates (if applicable)
  //   - Who granted the access
  //   - Current status (active, expired, revoked)
  //
  // This helps users understand their collaboration permissions and
  // administrators audit cross-organization relationships.
  rpc ListUserCrossOrganizationAccess(ListUserCrossOrganizationAccessRequest) returns (ListUserCrossOrganizationAccessResponse);
  
  // === Invitation Management ===
  
  // CreateInvitation creates an invitation for various types of access.
  //
  // Invitation types:
  //   - "organization": Invite to join an organization
  //   - "team": Invite to join a specific team
  //   - "cross_organization": Invite for cross-org collaboration
  //
  // Features:
  //   - Email-based invitations with secure tokens
  //   - Optional account creation for new users
  //   - Configurable expiration (default: 7 days)
  //   - Role assignment upon acceptance
  //
  // The invitation email includes context about the organization/team
  // and the permissions being granted.
  rpc CreateInvitation(CreateInvitationRequest) returns (CreateInvitationResponse);
  
  // AcceptInvitation processes an invitation acceptance.
  //
  // This method handles:
  //   - Validating the invitation token and expiration
  //   - Creating user account (if requested and user doesn't exist)
  //   - Adding user to organization/team with specified role
  //   - Sending welcome notifications
  //
  // For new account creation:
  //   - User provides password during acceptance
  //   - Account is created with email from invitation
  //   - User is immediately added to the target organization/team
  rpc AcceptInvitation(AcceptInvitationRequest) returns (AcceptInvitationResponse);
  
  // ListInvitations retrieves invitations based on filter criteria.
  //
  // Filtering options:
  //   - By organization (all invitations for an org)
  //   - By team (team-specific invitations)
  //   - By email (invitations for a specific email address)
  //   - By status (pending, accepted, expired, cancelled)
  //
  // Results include invitation details and current status.
  rpc ListInvitations(ListInvitationsRequest) returns (ListInvitationsResponse);
  
  // CancelInvitation revokes a pending invitation.
  //
  // Cancellation:
  //   - Invalidates the invitation token
  //   - Prevents future acceptance
  //   - Logs the cancellation for audit
  //   - Optionally notifies the invitee
  //
  // Only pending invitations can be cancelled. Accepted invitations
  // require membership removal instead.
  rpc CancelInvitation(CancelInvitationRequest) returns (CancelInvitationResponse);
  
  // === Enterprise User Management ===
  
  // BindUserToOrganization creates special enterprise user relationships.
  //
  // Enterprise bindings enable:
  //   - Cross-organization user management
  //   - Centralized access control
  //   - Automatic organization access based on user attributes
  //   - Simplified user provisioning for large enterprises
  //
  // Binding types:
  //   - "primary": User's main organizational affiliation
  //   - "secondary": Additional organizational access
  //   - "contractor": Temporary engagement with specific scope
  //
  // Enterprise users may have special privileges like automatic access
  // to connected organizations.
  rpc BindUserToOrganization(BindUserToOrganizationRequest) returns (BindUserToOrganizationResponse);
  
  // GetUserAccessContext provides comprehensive access information.
  //
  // This method returns:
  //   - Primary organization affiliation
  //   - All accessible organizations (direct + connected)
  //   - All accessible teams across organizations
  //   - Enterprise user status and special privileges
  //
  // This is used for:
  //   - Session establishment
  //   - Access control decisions
  //   - UI personalization (showing available organizations/teams)
  rpc GetUserAccessContext(GetUserAccessContextRequest) returns (GetUserAccessContextResponse);
  
  // CanUserJoinOrganization checks if a user is eligible to join an organization.
  //
  // This method considers:
  //   - Organization invitation policies
  //   - Email domain restrictions
  //   - Enterprise user bindings
  //   - Existing memberships and conflicts
  //   - Organization capacity limits
  //
  // The response includes the eligibility decision and reasoning,
  // which can be used to provide user-friendly error messages.
  rpc CanUserJoinOrganization(CanUserJoinOrganizationRequest) returns (CanUserJoinOrganizationResponse);
  
  // === Utility Methods ===
  
  // ValidateOrganizationAccess verifies user access to an organization.
  //
  // This method checks:
  //   - Direct organization membership
  //   - Cross-organization access grants
  //   - Enterprise user bindings
  //   - Connected organization relationships
  //
  // Returns the access type and whether access is currently valid.
  // Used for authorization checks throughout the system.
  rpc ValidateOrganizationAccess(ValidateOrganizationAccessRequest) returns (ValidateOrganizationAccessResponse);
  
  // ValidateTeamAccess verifies user access to a specific team.
  //
  // This method checks:
  //   - Direct team membership
  //   - Organization-level permissions that grant team access
  //   - Inherited access from parent teams (if hierarchical)
  //
  // Returns access status and the organization context for the team.
  rpc ValidateTeamAccess(ValidateTeamAccessRequest) returns (ValidateTeamAccessResponse);
  
  // GetOrganizationByTeam retrieves the organization that owns a team.
  //
  // This utility method is helpful when you have a team ID but need
  // to determine the organizational context for permission checks
  // or navigation purposes.
  rpc GetOrganizationByTeam(GetOrganizationByTeamRequest) returns (GetOrganizationByTeamResponse);
  
  // CleanupExpiredData removes expired invitations and access grants.
  //
  // This maintenance operation:
  //   - Removes invitations past their expiration date
  //   - Revokes expired cross-organization access
  //   - Archives historical data for compliance
  //   - Updates related audit logs
  //
  // Typically called by scheduled background jobs to maintain
  // data hygiene and security.
  rpc CleanupExpiredData(CleanupExpiredDataRequest) returns (CleanupExpiredDataResponse);
}

message GetOrCreateUserRequest {
  string email = 1;
  string full_name = 2;
}

message GetOrCreateUserResponse {
  string user_id = 1;
  string organization_id = 2; // The user's organization.
  string default_team_id = 3; // The user's initial team.
}

message CheckPermissionRequest {
  string user_id = 1;
  string team_id = 2;
  string permission = 3; // e.g., "team:members:invite"
}

message CheckPermissionResponse {
  bool has_permission = 1;
}

message GetTeamMembersRequest {
  string team_id = 1;
}

message TeamMember {
  string user_id = 1;
  string full_name = 2;
  string role_name = 3;
}

message GetTeamMembersResponse {
  repeated TeamMember members = 1;
}

// === Common Types ===

message User {
  string id = 1;
  string full_name = 2;
  string avatar_url = 3;
  string email = 4;
  string created_at = 5;
  string updated_at = 6;
}

message Organization {
  string id = 1;
  string name = 2;
  string slug = 3;
  string description = 4;
  string logo_url = 5;
  string website = 6;
  string created_at = 7;
  string updated_at = 8;
}

message Team {
  string id = 1;
  string organization_id = 2;
  string parent_team_id = 3;
  string name = 4;
  int32 hierarchy_depth = 5;
  string team_path = 6;
  string created_at = 7;
  string updated_at = 8;
}

message OrganizationRole {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  repeated string permissions = 4;
  string created_at = 5;
  string updated_at = 6;
}

message TeamRole {
  string id = 1;
  string team_id = 2;
  string name = 3;
  repeated string permissions = 4;
  string created_at = 5;
  string updated_at = 6;
}

message OrganizationMember {
  string user_id = 1;
  string full_name = 2;
  string email = 3;
  string role_id = 4;
  string role_name = 5;
  string joined_at = 6;
}

message OrganizationConnection {
  string id = 1;
  string source_organization_id = 2;
  string target_organization_id = 3;
  string connection_type = 4;
  string status = 5;
  string created_at = 6;
}

message ConnectedOrganization {
  Organization organization = 1;
  string connection_type = 2;
  string status = 3;
  bool is_source = 4;
}

message CrossOrganizationAccess {
  string id = 1;
  string user_id = 2;
  string source_organization_id = 3;
  string target_organization_id = 4;
  string access_level = 5;
  string granted_by_user_id = 6;
  string expires_at = 7;
  string created_at = 8;
}

message Invitation {
  string id = 1;
  string team_id = 2;
  string organization_id = 3;
  string source_organization_id = 4;
  string email = 5;
  string role_id = 6;
  string invited_by_user_id = 7;
  string invitation_type = 8;
  string status = 9;
  bool create_account = 10;
  string expires_at = 11;
  string created_at = 12;
}

// === User Management Messages ===

message GetUserRequest {
  string user_id = 1;
}

message GetUserResponse {
  User user = 1;
  repeated Organization organizations = 2;
  repeated Team teams = 3;
}

message UpdateUserRequest {
  string user_id = 1;
  string full_name = 2;
  string avatar_url = 3;
}

message UpdateUserResponse {
  User user = 1;
}

// === Permission Management Messages ===

message CheckOrganizationPermissionRequest {
  string user_id = 1;
  string organization_id = 2;
  string permission = 3;
}

message CheckOrganizationPermissionResponse {
  bool has_permission = 1;
}

message GetUserPermissionsRequest {
  string user_id = 1;
  string organization_id = 2;
  string team_id = 3;
}

message GetUserPermissionsResponse {
  repeated string organization_permissions = 1;
  repeated string team_permissions = 2;
  repeated string effective_permissions = 3;
}

// === Organization Management Messages ===

message CreateOrganizationRequest {
  string name = 1;
  string slug = 2;
  string description = 3;
  string created_by_user_id = 4;
}

message CreateOrganizationResponse {
  Organization organization = 1;
  string default_team_id = 2;
}

message GetOrganizationRequest {
  string organization_id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
  int32 member_count = 2;
  int32 team_count = 3;
}

message UpdateOrganizationRequest {
  string organization_id = 1;
  string name = 2;
  string description = 3;
  string logo_url = 4;
  string website = 5;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message DeleteOrganizationRequest {
  string organization_id = 1;
}

message DeleteOrganizationResponse {
  bool success = 1;
}

message ListUserOrganizationsRequest {
  string user_id = 1;
}

message ListUserOrganizationsResponse {
  repeated Organization organizations = 1;
  repeated ConnectedOrganization connected_organizations = 2;
}

message GetOrganizationMembersRequest {
  string organization_id = 1;
}

message GetOrganizationMembersResponse {
  repeated OrganizationMember members = 1;
}

// === Team Management Messages ===

message CreateTeamRequest {
  string organization_id = 1;
  string parent_team_id = 2;
  string name = 3;
  string created_by_user_id = 4;
}

message CreateTeamResponse {
  Team team = 1;
}

message GetTeamRequest {
  string team_id = 1;
}

message GetTeamResponse {
  Team team = 1;
  Organization organization = 2;
  Team parent_team = 3;
  repeated Team child_teams = 4;
}

message UpdateTeamRequest {
  string team_id = 1;
  string name = 2;
  string parent_team_id = 3;
}

message UpdateTeamResponse {
  Team team = 1;
}

message DeleteTeamRequest {
  string team_id = 1;
}

message DeleteTeamResponse {
  bool success = 1;
}

message ListOrganizationTeamsRequest {
  string organization_id = 1;
  string parent_team_id = 2;
}

message ListOrganizationTeamsResponse {
  repeated Team teams = 1;
}

message GetTeamHierarchyRequest {
  string organization_id = 1;
}

message TeamHierarchyNode {
  Team team = 1;
  repeated TeamHierarchyNode children = 2;
}

message GetTeamHierarchyResponse {
  repeated TeamHierarchyNode root_teams = 1;
}

// === Role Management Messages ===

message CreateOrganizationRoleRequest {
  string organization_id = 1;
  string name = 2;
  repeated string permissions = 3;
}

message CreateOrganizationRoleResponse {
  OrganizationRole role = 1;
}

message ListOrganizationRolesRequest {
  string organization_id = 1;
}

message ListOrganizationRolesResponse {
  repeated OrganizationRole roles = 1;
}

message UpdateOrganizationRoleRequest {
  string role_id = 1;
  string name = 2;
  repeated string permissions = 3;
}

message UpdateOrganizationRoleResponse {
  OrganizationRole role = 1;
}

message DeleteOrganizationRoleRequest {
  string role_id = 1;
}

message DeleteOrganizationRoleResponse {
  bool success = 1;
}

// === Membership Management Messages ===

message AddOrganizationMemberRequest {
  string organization_id = 1;
  string user_id = 2;
  string role_id = 3;
  string added_by_user_id = 4;
}

message AddOrganizationMemberResponse {
  bool success = 1;
}

message RemoveOrganizationMemberRequest {
  string organization_id = 1;
  string user_id = 2;
}

message RemoveOrganizationMemberResponse {
  bool success = 1;
}

message UpdateOrganizationMemberRoleRequest {
  string organization_id = 1;
  string user_id = 2;
  string role_id = 3;
}

message UpdateOrganizationMemberRoleResponse {
  bool success = 1;
}

message AddTeamMemberRequest {
  string team_id = 1;
  string user_id = 2;
  string role_id = 3;
  string added_by_user_id = 4;
}

message AddTeamMemberResponse {
  bool success = 1;
}

message RemoveTeamMemberRequest {
  string team_id = 1;
  string user_id = 2;
}

message RemoveTeamMemberResponse {
  bool success = 1;
}

message UpdateTeamMemberRoleRequest {
  string team_id = 1;
  string user_id = 2;
  string role_id = 3;
}

message UpdateTeamMemberRoleResponse {
  bool success = 1;
}

// === Organization Connection Messages ===

message CreateOrganizationConnectionRequest {
  string source_organization_id = 1;
  string target_organization_id = 2;
  string connection_type = 3;
  string created_by_user_id = 4;
}

message CreateOrganizationConnectionResponse {
  OrganizationConnection connection = 1;
}

message ListConnectedOrganizationsRequest {
  string organization_id = 1;
}

message ListConnectedOrganizationsResponse {
  repeated ConnectedOrganization connected_organizations = 1;
}

message UpdateOrganizationConnectionRequest {
  string connection_id = 1;
  string connection_type = 2;
  string status = 3;
}

message UpdateOrganizationConnectionResponse {
  OrganizationConnection connection = 1;
}

message DeleteOrganizationConnectionRequest {
  string connection_id = 1;
}

message DeleteOrganizationConnectionResponse {
  bool success = 1;
}

// === Cross-Organization Access Messages ===

message GrantCrossOrganizationAccessRequest {
  string user_id = 1;
  string source_organization_id = 2;
  string target_organization_id = 3;
  string access_level = 4;
  string granted_by_user_id = 5;
  string expires_at = 6;
}

message GrantCrossOrganizationAccessResponse {
  CrossOrganizationAccess access = 1;
}

message RevokeCrossOrganizationAccessRequest {
  string user_id = 1;
  string target_organization_id = 2;
}

message RevokeCrossOrganizationAccessResponse {
  bool success = 1;
}

message ListUserCrossOrganizationAccessRequest {
  string user_id = 1;
}

message ListUserCrossOrganizationAccessResponse {
  repeated CrossOrganizationAccess access_list = 1;
}

// === Invitation Management Messages ===

message CreateInvitationRequest {
  string team_id = 1;
  string organization_id = 2;
  string source_organization_id = 3;
  string email = 4;
  string role_id = 5;
  string invited_by_user_id = 6;
  string invitation_type = 7;
  bool create_account = 8;
  string account_full_name = 9;
}

message CreateInvitationResponse {
  Invitation invitation = 1;
}

message AcceptInvitationRequest {
  string invitation_id = 1;
  string user_id = 2;
  string password = 3; // For account creation
}

message AcceptInvitationResponse {
  bool success = 1;
  string user_id = 2; // If account was created
  string organization_id = 3;
  string team_id = 4;
}

message ListInvitationsRequest {
  string organization_id = 1;
  string team_id = 2;
  string email = 3;
  string status = 4;
}

message ListInvitationsResponse {
  repeated Invitation invitations = 1;
}

message CancelInvitationRequest {
  string invitation_id = 1;
}

message CancelInvitationResponse {
  bool success = 1;
}

// === Enterprise User Management Messages ===

message BindUserToOrganizationRequest {
  string user_id = 1;
  string organization_id = 2;
  string binding_type = 3;
  bool can_join_connected_orgs = 4;
  string created_by_user_id = 5;
}

message BindUserToOrganizationResponse {
  bool success = 1;
}

message GetUserAccessContextRequest {
  string user_id = 1;
}

message GetUserAccessContextResponse {
  string user_id = 1;
  string primary_organization_id = 2;
  repeated string accessible_organization_ids = 3;
  repeated string accessible_team_ids = 4;
  bool is_enterprise_user = 5;
}

message CanUserJoinOrganizationRequest {
  string user_id = 1;
  string organization_id = 2;
}

message CanUserJoinOrganizationResponse {
  bool can_join = 1;
  string reason = 2;
}

// === Utility Messages ===

message ValidateOrganizationAccessRequest {
  string user_id = 1;
  string organization_id = 2;
}

message ValidateOrganizationAccessResponse {
  bool has_access = 1;
  string access_type = 2;
}

message ValidateTeamAccessRequest {
  string user_id = 1;
  string team_id = 2;
}

message ValidateTeamAccessResponse {
  bool has_access = 1;
  string organization_id = 2;
}

message GetOrganizationByTeamRequest {
  string team_id = 1;
}

message GetOrganizationByTeamResponse {
  Organization organization = 1;
}

message CleanupExpiredDataRequest {
  bool cleanup_invitations = 1;
  bool cleanup_cross_org_access = 2;
}

message CleanupExpiredDataResponse {
  int32 invitations_cleaned = 1;
  int32 access_cleaned = 2;
}